# coding: utf-8

"""
    Tebex Checkout API

    The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

    The version of the OpenAPI document: 1.0.0
    Contact: tebex-integrations@overwolf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from TebexCheckout.models.basket import Basket

class TestBasket(unittest.TestCase):
    """Basket unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Basket:
        """Test Basket
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Basket`
        """
        model = Basket()
        if include_optional:
            return Basket(
                ident = '1a-55fff4107740a1f40d844ff89607557f45bfafb3',
                expire = '2022-10-25 15:15:40',
                price = 1.27,
                price_details = {"fullPrice":1.4,"subTotal":1.27,"discounts":[],"total":1.4,"surcharges":[],"tax":0.13,"balance":0,"sales":[],"giftcards":[],"roundUp":null},
                type = 'single',
                recurring = False,
                recurring_period = None,
                recurring_next_payment_date = '',
                is_payment_method_update = False,
                return_url = '',
                complete = False,
                tax = None,
                username = '',
                discounts = [
                    TebexCheckout.models.discount.Discount()
                    ],
                coupons = [
                    TebexCheckout.models.coupon.Coupon()
                    ],
                giftcards = [
                    TebexCheckout.models.gift_card.GiftCard()
                    ],
                address = {"name":"Neil McNeil","first_name":"Neil","last_name":"McNeil","address":"37 Broadhurst Gardens, London, United Kingdom, NW6 3QT","email":"example@tebex.io","state_id":null,"country":"UK","postal_code":"NW6 3QT"},
                rows = [
                    TebexCheckout.models.basket_item.BasketItem(
                        qty = 2, 
                        type = 'single', 
                        revenue_share = [
                            TebexCheckout.models.revenue_share.RevenueShare(
                                wallet_ref = 'some_wallet_reference', 
                                amount = 0.5, 
                                gateway_fee_percent = 50.0, )
                            ], )
                    ],
                fingerprint = '',
                creator_code = '',
                roundup = False,
                cancel_url = 'https://tebex.io',
                complete_url = '',
                complete_auto_redirect = False,
                custom = {"foo":"bar","ref":1234},
                links = TebexCheckout.models.basket_links.BasketLinks(
                    payment = 'https://checkout.tebex.io/api/payments/tbx-12345', 
                    checkout = 'https://checkout.tebex.io/checkout/1a-55fff4107740a1f40d844ff89607557f45bfafb3', )
            )
        else:
            return Basket(
        )
        """

    def testBasket(self):
        """Test Basket"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
