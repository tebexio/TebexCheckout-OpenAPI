# coding: utf-8

"""
    Tebex Checkout API

    The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

    The version of the OpenAPI document: 1.0.0
    Contact: tebex-integrations@overwolf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from TebexCheckout.models.payment_custom import PaymentCustom
from TebexCheckout.models.payment_customer import PaymentCustomer
from TebexCheckout.models.payment_fees import PaymentFees
from TebexCheckout.models.payment_price import PaymentPrice
from TebexCheckout.models.payment_products_inner import PaymentProductsInner
from TebexCheckout.models.payment_status import PaymentStatus
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    Payment
    """ # noqa: E501
    transaction_id: Optional[StrictStr] = None
    status: Optional[PaymentStatus] = None
    payment_sequence: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    price: Optional[PaymentPrice] = None
    fees: Optional[PaymentFees] = None
    customer: Optional[PaymentCustomer] = None
    products: Optional[List[PaymentProductsInner]] = None
    coupons: Optional[List[StrictStr]] = None
    gift_cards: Optional[List[StrictStr]] = None
    recurring_payment_reference: Optional[StrictStr] = None
    custom: Optional[PaymentCustom] = None
    __properties: ClassVar[List[str]] = ["transaction_id", "status", "payment_sequence", "created_at", "price", "fees", "customer", "products", "coupons", "gift_cards", "recurring_payment_reference", "custom"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fees
        if self.fees:
            _dict['fees'] = self.fees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom
        if self.custom:
            _dict['custom'] = self.custom.to_dict()
        # set to None if recurring_payment_reference (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_payment_reference is None and "recurring_payment_reference" in self.model_fields_set:
            _dict['recurring_payment_reference'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transaction_id": obj.get("transaction_id"),
            "status": PaymentStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "payment_sequence": obj.get("payment_sequence"),
            "created_at": obj.get("created_at"),
            "price": PaymentPrice.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "fees": PaymentFees.from_dict(obj["fees"]) if obj.get("fees") is not None else None,
            "customer": PaymentCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "products": [PaymentProductsInner.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "coupons": obj.get("coupons"),
            "gift_cards": obj.get("gift_cards"),
            "recurring_payment_reference": obj.get("recurring_payment_reference"),
            "custom": PaymentCustom.from_dict(obj["custom"]) if obj.get("custom") is not None else None
        })
        return _obj


