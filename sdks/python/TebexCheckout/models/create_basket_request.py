# coding: utf-8

"""
    Tebex Checkout API

    The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

    The version of the OpenAPI document: 1.0.0
    Contact: tebex-integrations@overwolf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateBasketRequest(BaseModel):
    """
    CreateBasketRequest
    """ # noqa: E501
    return_url: Optional[StrictStr] = Field(default=None, description="The URL a customer can return to without completing checkout")
    complete_url: Optional[StrictStr] = Field(default=None, description="URL the customer can return to after completing payment")
    custom: Optional[Dict[str, Any]] = Field(default=None, description="Any custom data to be passed through the request. This will be returned in a post-completion webhook.")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the customer")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the customer")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the customer")
    expires_at: Optional[StrictStr] = Field(default=None, description="An ISO8601 formatted date. After this date the basket cannot be used to checkout.")
    complete_auto_redirect: Optional[StrictBool] = Field(default=None, description="Automatically redirect to the complete_url provided")
    country: Optional[StrictStr] = Field(default=None, description="An ISO 3166-1 alpha-2 character code representing the customer's country.")
    creator_code: Optional[StrictStr] = Field(default=None, description="The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes")
    __properties: ClassVar[List[str]] = ["return_url", "complete_url", "custom", "first_name", "last_name", "email", "expires_at", "complete_auto_redirect", "country", "creator_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateBasketRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateBasketRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "return_url": obj.get("return_url"),
            "complete_url": obj.get("complete_url"),
            "custom": obj.get("custom"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "expires_at": obj.get("expires_at"),
            "complete_auto_redirect": obj.get("complete_auto_redirect"),
            "country": obj.get("country"),
            "creator_code": obj.get("creator_code")
        })
        return _obj


