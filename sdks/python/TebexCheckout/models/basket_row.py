# coding: utf-8

"""
    Tebex Checkout API

    The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

    The version of the OpenAPI document: 1.1.0
    Contact: tebex-integrations@overwolf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from TebexCheckout.models.basket_row_meta import BasketRowMeta
from typing import Optional, Set
from typing_extensions import Self

class BasketRow(BaseModel):
    """
    BasketRow
    """ # noqa: E501
    id: Optional[StrictInt] = None
    basket: Optional[StrictInt] = Field(default=None, description="Numeric basket ID")
    package: Optional[StrictInt] = Field(default=None, description="Package ID associated with this item")
    override: Optional[StrictInt] = Field(default=None, description="Package ID associated with this item")
    quantity: Optional[StrictInt] = None
    server: Optional[StrictInt] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    gift_username_id: Optional[StrictInt] = None
    options: Optional[Dict[str, Any]] = None
    recurring: Optional[StrictBool] = None
    recurring_period: Optional[StrictStr] = None
    recurring_next_payment_date: Optional[datetime] = None
    meta: Optional[BasketRowMeta] = None
    custom: Optional[Dict[str, Any]] = None
    image_url: Optional[StrictStr] = None
    recurring_price: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["id", "basket", "package", "override", "quantity", "server", "price", "gift_username_id", "options", "recurring", "recurring_period", "recurring_next_payment_date", "meta", "custom", "image_url", "recurring_price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BasketRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # set to None if package (nullable) is None
        # and model_fields_set contains the field
        if self.package is None and "package" in self.model_fields_set:
            _dict['package'] = None

        # set to None if server (nullable) is None
        # and model_fields_set contains the field
        if self.server is None and "server" in self.model_fields_set:
            _dict['server'] = None

        # set to None if gift_username_id (nullable) is None
        # and model_fields_set contains the field
        if self.gift_username_id is None and "gift_username_id" in self.model_fields_set:
            _dict['gift_username_id'] = None

        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict['options'] = None

        # set to None if recurring_period (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_period is None and "recurring_period" in self.model_fields_set:
            _dict['recurring_period'] = None

        # set to None if recurring_next_payment_date (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_next_payment_date is None and "recurring_next_payment_date" in self.model_fields_set:
            _dict['recurring_next_payment_date'] = None

        # set to None if custom (nullable) is None
        # and model_fields_set contains the field
        if self.custom is None and "custom" in self.model_fields_set:
            _dict['custom'] = None

        # set to None if image_url (nullable) is None
        # and model_fields_set contains the field
        if self.image_url is None and "image_url" in self.model_fields_set:
            _dict['image_url'] = None

        # set to None if recurring_price (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_price is None and "recurring_price" in self.model_fields_set:
            _dict['recurring_price'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BasketRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "basket": obj.get("basket"),
            "package": obj.get("package"),
            "override": obj.get("override"),
            "quantity": obj.get("quantity"),
            "server": obj.get("server"),
            "price": obj.get("price"),
            "gift_username_id": obj.get("gift_username_id"),
            "options": obj.get("options"),
            "recurring": obj.get("recurring"),
            "recurring_period": obj.get("recurring_period"),
            "recurring_next_payment_date": obj.get("recurring_next_payment_date"),
            "meta": BasketRowMeta.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "custom": obj.get("custom"),
            "image_url": obj.get("image_url"),
            "recurring_price": obj.get("recurring_price")
        })
        return _obj


