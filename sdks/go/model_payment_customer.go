/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the PaymentCustomer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentCustomer{}

// PaymentCustomer struct for PaymentCustomer
type PaymentCustomer struct {
	FirstName *string `json:"first_name,omitempty"`
	LastName *string `json:"last_name,omitempty"`
	Email *string `json:"email,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Username NullableString `json:"username,omitempty"`
	MarketingConsent *bool `json:"marketing_consent,omitempty"`
	Country *string `json:"country,omitempty"`
	PostalCode NullableString `json:"postal_code,omitempty"`
}

// NewPaymentCustomer instantiates a new PaymentCustomer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentCustomer() *PaymentCustomer {
	this := PaymentCustomer{}
	return &this
}

// NewPaymentCustomerWithDefaults instantiates a new PaymentCustomer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentCustomerWithDefaults() *PaymentCustomer {
	this := PaymentCustomer{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *PaymentCustomer) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCustomer) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *PaymentCustomer) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *PaymentCustomer) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *PaymentCustomer) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCustomer) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *PaymentCustomer) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *PaymentCustomer) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PaymentCustomer) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCustomer) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PaymentCustomer) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PaymentCustomer) SetEmail(v string) {
	o.Email = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *PaymentCustomer) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCustomer) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *PaymentCustomer) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *PaymentCustomer) SetIp(v string) {
	o.Ip = &v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentCustomer) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentCustomer) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *PaymentCustomer) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *PaymentCustomer) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *PaymentCustomer) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *PaymentCustomer) UnsetUsername() {
	o.Username.Unset()
}

// GetMarketingConsent returns the MarketingConsent field value if set, zero value otherwise.
func (o *PaymentCustomer) GetMarketingConsent() bool {
	if o == nil || IsNil(o.MarketingConsent) {
		var ret bool
		return ret
	}
	return *o.MarketingConsent
}

// GetMarketingConsentOk returns a tuple with the MarketingConsent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCustomer) GetMarketingConsentOk() (*bool, bool) {
	if o == nil || IsNil(o.MarketingConsent) {
		return nil, false
	}
	return o.MarketingConsent, true
}

// HasMarketingConsent returns a boolean if a field has been set.
func (o *PaymentCustomer) HasMarketingConsent() bool {
	if o != nil && !IsNil(o.MarketingConsent) {
		return true
	}

	return false
}

// SetMarketingConsent gets a reference to the given bool and assigns it to the MarketingConsent field.
func (o *PaymentCustomer) SetMarketingConsent(v bool) {
	o.MarketingConsent = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PaymentCustomer) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCustomer) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PaymentCustomer) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PaymentCustomer) SetCountry(v string) {
	o.Country = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentCustomer) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode.Get()) {
		var ret string
		return ret
	}
	return *o.PostalCode.Get()
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentCustomer) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostalCode.Get(), o.PostalCode.IsSet()
}

// HasPostalCode returns a boolean if a field has been set.
func (o *PaymentCustomer) HasPostalCode() bool {
	if o != nil && o.PostalCode.IsSet() {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given NullableString and assigns it to the PostalCode field.
func (o *PaymentCustomer) SetPostalCode(v string) {
	o.PostalCode.Set(&v)
}
// SetPostalCodeNil sets the value for PostalCode to be an explicit nil
func (o *PaymentCustomer) SetPostalCodeNil() {
	o.PostalCode.Set(nil)
}

// UnsetPostalCode ensures that no value is present for PostalCode, not even an explicit nil
func (o *PaymentCustomer) UnsetPostalCode() {
	o.PostalCode.Unset()
}

func (o PaymentCustomer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentCustomer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if !IsNil(o.MarketingConsent) {
		toSerialize["marketing_consent"] = o.MarketingConsent
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if o.PostalCode.IsSet() {
		toSerialize["postal_code"] = o.PostalCode.Get()
	}
	return toSerialize, nil
}

type NullablePaymentCustomer struct {
	value *PaymentCustomer
	isSet bool
}

func (v NullablePaymentCustomer) Get() *PaymentCustomer {
	return v.value
}

func (v *NullablePaymentCustomer) Set(val *PaymentCustomer) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentCustomer) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentCustomer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentCustomer(val *PaymentCustomer) *NullablePaymentCustomer {
	return &NullablePaymentCustomer{value: val, isSet: true}
}

func (v NullablePaymentCustomer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentCustomer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


