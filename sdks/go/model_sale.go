/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the Sale type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sale{}

// Sale struct for Sale
type Sale struct {
	// The name of the sale (displayed to the customer)
	Name *string `json:"name,omitempty"`
	// The type of discount, either `percentage` for deducting a percentage of each item, or `amount` to deduct a fixed amount from each item.
	DiscountType *string `json:"discount_type,omitempty"`
	// The amount or percentage to deduct
	Amount *float32 `json:"amount,omitempty"`
}

// NewSale instantiates a new Sale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSale() *Sale {
	this := Sale{}
	return &this
}

// NewSaleWithDefaults instantiates a new Sale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaleWithDefaults() *Sale {
	this := Sale{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Sale) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sale) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Sale) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Sale) SetName(v string) {
	o.Name = &v
}

// GetDiscountType returns the DiscountType field value if set, zero value otherwise.
func (o *Sale) GetDiscountType() string {
	if o == nil || IsNil(o.DiscountType) {
		var ret string
		return ret
	}
	return *o.DiscountType
}

// GetDiscountTypeOk returns a tuple with the DiscountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sale) GetDiscountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiscountType) {
		return nil, false
	}
	return o.DiscountType, true
}

// HasDiscountType returns a boolean if a field has been set.
func (o *Sale) HasDiscountType() bool {
	if o != nil && !IsNil(o.DiscountType) {
		return true
	}

	return false
}

// SetDiscountType gets a reference to the given string and assigns it to the DiscountType field.
func (o *Sale) SetDiscountType(v string) {
	o.DiscountType = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Sale) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sale) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Sale) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *Sale) SetAmount(v float32) {
	o.Amount = &v
}

func (o Sale) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sale) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DiscountType) {
		toSerialize["discount_type"] = o.DiscountType
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	return toSerialize, nil
}

type NullableSale struct {
	value *Sale
	isSet bool
}

func (v NullableSale) Get() *Sale {
	return v.value
}

func (v *NullableSale) Set(val *Sale) {
	v.value = val
	v.isSet = true
}

func (v NullableSale) IsSet() bool {
	return v.isSet
}

func (v *NullableSale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSale(val *Sale) *NullableSale {
	return &NullableSale{value: val, isSet: true}
}

func (v NullableSale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


