/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckoutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutRequest{}

// CheckoutRequest struct for CheckoutRequest
type CheckoutRequest struct {
	Basket CheckoutRequestBasket `json:"basket"`
	// An array of `Packages` in the basket.
	Items []CheckoutItem `json:"items"`
	Sale *Sale `json:"sale,omitempty"`
}

type _CheckoutRequest CheckoutRequest

// NewCheckoutRequest instantiates a new CheckoutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutRequest(basket CheckoutRequestBasket, items []CheckoutItem) *CheckoutRequest {
	this := CheckoutRequest{}
	this.Basket = basket
	this.Items = items
	return &this
}

// NewCheckoutRequestWithDefaults instantiates a new CheckoutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutRequestWithDefaults() *CheckoutRequest {
	this := CheckoutRequest{}
	return &this
}

// GetBasket returns the Basket field value
func (o *CheckoutRequest) GetBasket() CheckoutRequestBasket {
	if o == nil {
		var ret CheckoutRequestBasket
		return ret
	}

	return o.Basket
}

// GetBasketOk returns a tuple with the Basket field value
// and a boolean to check if the value has been set.
func (o *CheckoutRequest) GetBasketOk() (*CheckoutRequestBasket, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Basket, true
}

// SetBasket sets field value
func (o *CheckoutRequest) SetBasket(v CheckoutRequestBasket) {
	o.Basket = v
}

// GetItems returns the Items field value
func (o *CheckoutRequest) GetItems() []CheckoutItem {
	if o == nil {
		var ret []CheckoutItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CheckoutRequest) GetItemsOk() ([]CheckoutItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CheckoutRequest) SetItems(v []CheckoutItem) {
	o.Items = v
}

// GetSale returns the Sale field value if set, zero value otherwise.
func (o *CheckoutRequest) GetSale() Sale {
	if o == nil || IsNil(o.Sale) {
		var ret Sale
		return ret
	}
	return *o.Sale
}

// GetSaleOk returns a tuple with the Sale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequest) GetSaleOk() (*Sale, bool) {
	if o == nil || IsNil(o.Sale) {
		return nil, false
	}
	return o.Sale, true
}

// HasSale returns a boolean if a field has been set.
func (o *CheckoutRequest) HasSale() bool {
	if o != nil && !IsNil(o.Sale) {
		return true
	}

	return false
}

// SetSale gets a reference to the given Sale and assigns it to the Sale field.
func (o *CheckoutRequest) SetSale(v Sale) {
	o.Sale = &v
}

func (o CheckoutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["basket"] = o.Basket
	toSerialize["items"] = o.Items
	if !IsNil(o.Sale) {
		toSerialize["sale"] = o.Sale
	}
	return toSerialize, nil
}

func (o *CheckoutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"basket",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckoutRequest := _CheckoutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckoutRequest)

	if err != nil {
		return err
	}

	*o = CheckoutRequest(varCheckoutRequest)

	return err
}

type NullableCheckoutRequest struct {
	value *CheckoutRequest
	isSet bool
}

func (v NullableCheckoutRequest) Get() *CheckoutRequest {
	return v.value
}

func (v *NullableCheckoutRequest) Set(val *CheckoutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutRequest(val *CheckoutRequest) *NullableCheckoutRequest {
	return &NullableCheckoutRequest{value: val, isSet: true}
}

func (v NullableCheckoutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


