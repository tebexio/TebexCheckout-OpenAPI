/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the RecurringPaymentStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecurringPaymentStatus{}

// RecurringPaymentStatus struct for RecurringPaymentStatus
type RecurringPaymentStatus struct {
	Id *int32 `json:"id,omitempty"`
	Class *string `json:"class,omitempty"`
	Description *string `json:"description,omitempty"`
	Active *int32 `json:"active,omitempty"`
}

// NewRecurringPaymentStatus instantiates a new RecurringPaymentStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringPaymentStatus() *RecurringPaymentStatus {
	this := RecurringPaymentStatus{}
	return &this
}

// NewRecurringPaymentStatusWithDefaults instantiates a new RecurringPaymentStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringPaymentStatusWithDefaults() *RecurringPaymentStatus {
	this := RecurringPaymentStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecurringPaymentStatus) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringPaymentStatus) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecurringPaymentStatus) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RecurringPaymentStatus) SetId(v int32) {
	o.Id = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *RecurringPaymentStatus) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringPaymentStatus) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *RecurringPaymentStatus) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *RecurringPaymentStatus) SetClass(v string) {
	o.Class = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RecurringPaymentStatus) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringPaymentStatus) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RecurringPaymentStatus) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RecurringPaymentStatus) SetDescription(v string) {
	o.Description = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RecurringPaymentStatus) GetActive() int32 {
	if o == nil || IsNil(o.Active) {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringPaymentStatus) GetActiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RecurringPaymentStatus) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *RecurringPaymentStatus) SetActive(v int32) {
	o.Active = &v
}

func (o RecurringPaymentStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecurringPaymentStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableRecurringPaymentStatus struct {
	value *RecurringPaymentStatus
	isSet bool
}

func (v NullableRecurringPaymentStatus) Get() *RecurringPaymentStatus {
	return v.value
}

func (v *NullableRecurringPaymentStatus) Set(val *RecurringPaymentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringPaymentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringPaymentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringPaymentStatus(val *RecurringPaymentStatus) *NullableRecurringPaymentStatus {
	return &NullableRecurringPaymentStatus{value: val, isSet: true}
}

func (v NullableRecurringPaymentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringPaymentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


