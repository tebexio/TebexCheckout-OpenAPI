/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
	"time"
)

// checks if the PaymentProductsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentProductsInner{}

// PaymentProductsInner struct for PaymentProductsInner
type PaymentProductsInner struct {
	Id NullableString `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
	BasePrice *PaymentProductsInnerBasePrice `json:"base_price,omitempty"`
	PaidPrice *PaymentProductsInnerBasePrice `json:"paid_price,omitempty"`
	Variables []string `json:"variables,omitempty"`
	ExpiresAt NullableTime `json:"expires_at,omitempty"`
	Custom *string `json:"custom,omitempty"`
	Username NullableString `json:"username,omitempty"`
}

// NewPaymentProductsInner instantiates a new PaymentProductsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentProductsInner() *PaymentProductsInner {
	this := PaymentProductsInner{}
	return &this
}

// NewPaymentProductsInnerWithDefaults instantiates a new PaymentProductsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentProductsInnerWithDefaults() *PaymentProductsInner {
	this := PaymentProductsInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentProductsInner) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentProductsInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PaymentProductsInner) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PaymentProductsInner) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PaymentProductsInner) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PaymentProductsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentProductsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PaymentProductsInner) SetName(v string) {
	o.Name = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *PaymentProductsInner) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentProductsInner) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *PaymentProductsInner) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetBasePrice returns the BasePrice field value if set, zero value otherwise.
func (o *PaymentProductsInner) GetBasePrice() PaymentProductsInnerBasePrice {
	if o == nil || IsNil(o.BasePrice) {
		var ret PaymentProductsInnerBasePrice
		return ret
	}
	return *o.BasePrice
}

// GetBasePriceOk returns a tuple with the BasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentProductsInner) GetBasePriceOk() (*PaymentProductsInnerBasePrice, bool) {
	if o == nil || IsNil(o.BasePrice) {
		return nil, false
	}
	return o.BasePrice, true
}

// HasBasePrice returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasBasePrice() bool {
	if o != nil && !IsNil(o.BasePrice) {
		return true
	}

	return false
}

// SetBasePrice gets a reference to the given PaymentProductsInnerBasePrice and assigns it to the BasePrice field.
func (o *PaymentProductsInner) SetBasePrice(v PaymentProductsInnerBasePrice) {
	o.BasePrice = &v
}

// GetPaidPrice returns the PaidPrice field value if set, zero value otherwise.
func (o *PaymentProductsInner) GetPaidPrice() PaymentProductsInnerBasePrice {
	if o == nil || IsNil(o.PaidPrice) {
		var ret PaymentProductsInnerBasePrice
		return ret
	}
	return *o.PaidPrice
}

// GetPaidPriceOk returns a tuple with the PaidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentProductsInner) GetPaidPriceOk() (*PaymentProductsInnerBasePrice, bool) {
	if o == nil || IsNil(o.PaidPrice) {
		return nil, false
	}
	return o.PaidPrice, true
}

// HasPaidPrice returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasPaidPrice() bool {
	if o != nil && !IsNil(o.PaidPrice) {
		return true
	}

	return false
}

// SetPaidPrice gets a reference to the given PaymentProductsInnerBasePrice and assigns it to the PaidPrice field.
func (o *PaymentProductsInner) SetPaidPrice(v PaymentProductsInnerBasePrice) {
	o.PaidPrice = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *PaymentProductsInner) GetVariables() []string {
	if o == nil || IsNil(o.Variables) {
		var ret []string
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentProductsInner) GetVariablesOk() ([]string, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []string and assigns it to the Variables field.
func (o *PaymentProductsInner) SetVariables(v []string) {
	o.Variables = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentProductsInner) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentProductsInner) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt.IsSet() {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableTime and assigns it to the ExpiresAt field.
func (o *PaymentProductsInner) SetExpiresAt(v time.Time) {
	o.ExpiresAt.Set(&v)
}
// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *PaymentProductsInner) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *PaymentProductsInner) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *PaymentProductsInner) GetCustom() string {
	if o == nil || IsNil(o.Custom) {
		var ret string
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentProductsInner) GetCustomOk() (*string, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given string and assigns it to the Custom field.
func (o *PaymentProductsInner) SetCustom(v string) {
	o.Custom = &v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentProductsInner) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentProductsInner) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *PaymentProductsInner) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *PaymentProductsInner) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *PaymentProductsInner) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *PaymentProductsInner) UnsetUsername() {
	o.Username.Unset()
}

func (o PaymentProductsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentProductsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.BasePrice) {
		toSerialize["base_price"] = o.BasePrice
	}
	if !IsNil(o.PaidPrice) {
		toSerialize["paid_price"] = o.PaidPrice
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return toSerialize, nil
}

type NullablePaymentProductsInner struct {
	value *PaymentProductsInner
	isSet bool
}

func (v NullablePaymentProductsInner) Get() *PaymentProductsInner {
	return v.value
}

func (v *NullablePaymentProductsInner) Set(val *PaymentProductsInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentProductsInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentProductsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentProductsInner(val *PaymentProductsInner) *NullablePaymentProductsInner {
	return &NullablePaymentProductsInner{value: val, isSet: true}
}

func (v NullablePaymentProductsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentProductsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


