/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the PriceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceDetails{}

// PriceDetails struct for PriceDetails
type PriceDetails struct {
	FullPrice *float32 `json:"fullPrice,omitempty"`
	SubTotal *float32 `json:"subTotal,omitempty"`
	Discounts []map[string]interface{} `json:"discounts,omitempty"`
	Total *float32 `json:"total,omitempty"`
	Tax *float32 `json:"tax,omitempty"`
	Balance *float32 `json:"balance,omitempty"`
	Sales []Sale `json:"sales,omitempty"`
	Giftcards []map[string]interface{} `json:"giftcards,omitempty"`
	RoundUp NullableFloat32 `json:"roundUp,omitempty"`
}

// NewPriceDetails instantiates a new PriceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceDetails() *PriceDetails {
	this := PriceDetails{}
	return &this
}

// NewPriceDetailsWithDefaults instantiates a new PriceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceDetailsWithDefaults() *PriceDetails {
	this := PriceDetails{}
	return &this
}

// GetFullPrice returns the FullPrice field value if set, zero value otherwise.
func (o *PriceDetails) GetFullPrice() float32 {
	if o == nil || IsNil(o.FullPrice) {
		var ret float32
		return ret
	}
	return *o.FullPrice
}

// GetFullPriceOk returns a tuple with the FullPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetFullPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.FullPrice) {
		return nil, false
	}
	return o.FullPrice, true
}

// HasFullPrice returns a boolean if a field has been set.
func (o *PriceDetails) HasFullPrice() bool {
	if o != nil && !IsNil(o.FullPrice) {
		return true
	}

	return false
}

// SetFullPrice gets a reference to the given float32 and assigns it to the FullPrice field.
func (o *PriceDetails) SetFullPrice(v float32) {
	o.FullPrice = &v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise.
func (o *PriceDetails) GetSubTotal() float32 {
	if o == nil || IsNil(o.SubTotal) {
		var ret float32
		return ret
	}
	return *o.SubTotal
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetSubTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.SubTotal) {
		return nil, false
	}
	return o.SubTotal, true
}

// HasSubTotal returns a boolean if a field has been set.
func (o *PriceDetails) HasSubTotal() bool {
	if o != nil && !IsNil(o.SubTotal) {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given float32 and assigns it to the SubTotal field.
func (o *PriceDetails) SetSubTotal(v float32) {
	o.SubTotal = &v
}

// GetDiscounts returns the Discounts field value if set, zero value otherwise.
func (o *PriceDetails) GetDiscounts() []map[string]interface{} {
	if o == nil || IsNil(o.Discounts) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetDiscountsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Discounts) {
		return nil, false
	}
	return o.Discounts, true
}

// HasDiscounts returns a boolean if a field has been set.
func (o *PriceDetails) HasDiscounts() bool {
	if o != nil && !IsNil(o.Discounts) {
		return true
	}

	return false
}

// SetDiscounts gets a reference to the given []map[string]interface{} and assigns it to the Discounts field.
func (o *PriceDetails) SetDiscounts(v []map[string]interface{}) {
	o.Discounts = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *PriceDetails) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *PriceDetails) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *PriceDetails) SetTotal(v float32) {
	o.Total = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *PriceDetails) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *PriceDetails) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *PriceDetails) SetTax(v float32) {
	o.Tax = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *PriceDetails) GetBalance() float32 {
	if o == nil || IsNil(o.Balance) {
		var ret float32
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *PriceDetails) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float32 and assigns it to the Balance field.
func (o *PriceDetails) SetBalance(v float32) {
	o.Balance = &v
}

// GetSales returns the Sales field value if set, zero value otherwise.
func (o *PriceDetails) GetSales() []Sale {
	if o == nil || IsNil(o.Sales) {
		var ret []Sale
		return ret
	}
	return o.Sales
}

// GetSalesOk returns a tuple with the Sales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetSalesOk() ([]Sale, bool) {
	if o == nil || IsNil(o.Sales) {
		return nil, false
	}
	return o.Sales, true
}

// HasSales returns a boolean if a field has been set.
func (o *PriceDetails) HasSales() bool {
	if o != nil && !IsNil(o.Sales) {
		return true
	}

	return false
}

// SetSales gets a reference to the given []Sale and assigns it to the Sales field.
func (o *PriceDetails) SetSales(v []Sale) {
	o.Sales = v
}

// GetGiftcards returns the Giftcards field value if set, zero value otherwise.
func (o *PriceDetails) GetGiftcards() []map[string]interface{} {
	if o == nil || IsNil(o.Giftcards) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Giftcards
}

// GetGiftcardsOk returns a tuple with the Giftcards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetails) GetGiftcardsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Giftcards) {
		return nil, false
	}
	return o.Giftcards, true
}

// HasGiftcards returns a boolean if a field has been set.
func (o *PriceDetails) HasGiftcards() bool {
	if o != nil && !IsNil(o.Giftcards) {
		return true
	}

	return false
}

// SetGiftcards gets a reference to the given []map[string]interface{} and assigns it to the Giftcards field.
func (o *PriceDetails) SetGiftcards(v []map[string]interface{}) {
	o.Giftcards = v
}

// GetRoundUp returns the RoundUp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceDetails) GetRoundUp() float32 {
	if o == nil || IsNil(o.RoundUp.Get()) {
		var ret float32
		return ret
	}
	return *o.RoundUp.Get()
}

// GetRoundUpOk returns a tuple with the RoundUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceDetails) GetRoundUpOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundUp.Get(), o.RoundUp.IsSet()
}

// HasRoundUp returns a boolean if a field has been set.
func (o *PriceDetails) HasRoundUp() bool {
	if o != nil && o.RoundUp.IsSet() {
		return true
	}

	return false
}

// SetRoundUp gets a reference to the given NullableFloat32 and assigns it to the RoundUp field.
func (o *PriceDetails) SetRoundUp(v float32) {
	o.RoundUp.Set(&v)
}
// SetRoundUpNil sets the value for RoundUp to be an explicit nil
func (o *PriceDetails) SetRoundUpNil() {
	o.RoundUp.Set(nil)
}

// UnsetRoundUp ensures that no value is present for RoundUp, not even an explicit nil
func (o *PriceDetails) UnsetRoundUp() {
	o.RoundUp.Unset()
}

func (o PriceDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FullPrice) {
		toSerialize["fullPrice"] = o.FullPrice
	}
	if !IsNil(o.SubTotal) {
		toSerialize["subTotal"] = o.SubTotal
	}
	if !IsNil(o.Discounts) {
		toSerialize["discounts"] = o.Discounts
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.Sales) {
		toSerialize["sales"] = o.Sales
	}
	if !IsNil(o.Giftcards) {
		toSerialize["giftcards"] = o.Giftcards
	}
	if o.RoundUp.IsSet() {
		toSerialize["roundUp"] = o.RoundUp.Get()
	}
	return toSerialize, nil
}

type NullablePriceDetails struct {
	value *PriceDetails
	isSet bool
}

func (v NullablePriceDetails) Get() *PriceDetails {
	return v.value
}

func (v *NullablePriceDetails) Set(val *PriceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceDetails(val *PriceDetails) *NullablePriceDetails {
	return &NullablePriceDetails{value: val, isSet: true}
}

func (v NullablePriceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


