/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the CheckoutRequestBasket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutRequestBasket{}

// CheckoutRequestBasket An object containing the customer's information, relevant links, and any custom tracking data.
type CheckoutRequestBasket struct {
	FirstName *string `json:"first_name,omitempty"`
	LastName *string `json:"last_name,omitempty"`
	Email *string `json:"email,omitempty"`
	ReturnUrl *string `json:"return_url,omitempty"`
	CompleteUrl *string `json:"complete_url,omitempty"`
	Custom map[string]interface{} `json:"custom,omitempty"`
}

// NewCheckoutRequestBasket instantiates a new CheckoutRequestBasket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutRequestBasket() *CheckoutRequestBasket {
	this := CheckoutRequestBasket{}
	return &this
}

// NewCheckoutRequestBasketWithDefaults instantiates a new CheckoutRequestBasket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutRequestBasketWithDefaults() *CheckoutRequestBasket {
	this := CheckoutRequestBasket{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *CheckoutRequestBasket) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequestBasket) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *CheckoutRequestBasket) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *CheckoutRequestBasket) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *CheckoutRequestBasket) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequestBasket) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *CheckoutRequestBasket) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *CheckoutRequestBasket) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CheckoutRequestBasket) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequestBasket) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CheckoutRequestBasket) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CheckoutRequestBasket) SetEmail(v string) {
	o.Email = &v
}

// GetReturnUrl returns the ReturnUrl field value if set, zero value otherwise.
func (o *CheckoutRequestBasket) GetReturnUrl() string {
	if o == nil || IsNil(o.ReturnUrl) {
		var ret string
		return ret
	}
	return *o.ReturnUrl
}

// GetReturnUrlOk returns a tuple with the ReturnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequestBasket) GetReturnUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnUrl) {
		return nil, false
	}
	return o.ReturnUrl, true
}

// HasReturnUrl returns a boolean if a field has been set.
func (o *CheckoutRequestBasket) HasReturnUrl() bool {
	if o != nil && !IsNil(o.ReturnUrl) {
		return true
	}

	return false
}

// SetReturnUrl gets a reference to the given string and assigns it to the ReturnUrl field.
func (o *CheckoutRequestBasket) SetReturnUrl(v string) {
	o.ReturnUrl = &v
}

// GetCompleteUrl returns the CompleteUrl field value if set, zero value otherwise.
func (o *CheckoutRequestBasket) GetCompleteUrl() string {
	if o == nil || IsNil(o.CompleteUrl) {
		var ret string
		return ret
	}
	return *o.CompleteUrl
}

// GetCompleteUrlOk returns a tuple with the CompleteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequestBasket) GetCompleteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CompleteUrl) {
		return nil, false
	}
	return o.CompleteUrl, true
}

// HasCompleteUrl returns a boolean if a field has been set.
func (o *CheckoutRequestBasket) HasCompleteUrl() bool {
	if o != nil && !IsNil(o.CompleteUrl) {
		return true
	}

	return false
}

// SetCompleteUrl gets a reference to the given string and assigns it to the CompleteUrl field.
func (o *CheckoutRequestBasket) SetCompleteUrl(v string) {
	o.CompleteUrl = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *CheckoutRequestBasket) GetCustom() map[string]interface{} {
	if o == nil || IsNil(o.Custom) {
		var ret map[string]interface{}
		return ret
	}
	return o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequestBasket) GetCustomOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Custom) {
		return map[string]interface{}{}, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *CheckoutRequestBasket) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given map[string]interface{} and assigns it to the Custom field.
func (o *CheckoutRequestBasket) SetCustom(v map[string]interface{}) {
	o.Custom = v
}

func (o CheckoutRequestBasket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutRequestBasket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ReturnUrl) {
		toSerialize["return_url"] = o.ReturnUrl
	}
	if !IsNil(o.CompleteUrl) {
		toSerialize["complete_url"] = o.CompleteUrl
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	return toSerialize, nil
}

type NullableCheckoutRequestBasket struct {
	value *CheckoutRequestBasket
	isSet bool
}

func (v NullableCheckoutRequestBasket) Get() *CheckoutRequestBasket {
	return v.value
}

func (v *NullableCheckoutRequestBasket) Set(val *CheckoutRequestBasket) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutRequestBasket) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutRequestBasket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutRequestBasket(val *CheckoutRequestBasket) *NullableCheckoutRequestBasket {
	return &NullableCheckoutRequestBasket{value: val, isSet: true}
}

func (v NullableCheckoutRequestBasket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutRequestBasket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


