/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the BasketItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasketItem{}

// BasketItem A package within an existing basket.
type BasketItem struct {
	// The quantity of `package` in this basket. This is not the total quantity of overall items in the basket.
	Qty *int32 `json:"qty,omitempty"`
	// The type of payment, either `single` for one-time payments or `subscription`.
	Type *string `json:"type,omitempty"`
	// An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**
	RevenueShare []RevenueShare `json:"revenue_share,omitempty"`
}

// NewBasketItem instantiates a new BasketItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasketItem() *BasketItem {
	this := BasketItem{}
	return &this
}

// NewBasketItemWithDefaults instantiates a new BasketItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasketItemWithDefaults() *BasketItem {
	this := BasketItem{}
	return &this
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *BasketItem) GetQty() int32 {
	if o == nil || IsNil(o.Qty) {
		var ret int32
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketItem) GetQtyOk() (*int32, bool) {
	if o == nil || IsNil(o.Qty) {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *BasketItem) HasQty() bool {
	if o != nil && !IsNil(o.Qty) {
		return true
	}

	return false
}

// SetQty gets a reference to the given int32 and assigns it to the Qty field.
func (o *BasketItem) SetQty(v int32) {
	o.Qty = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BasketItem) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketItem) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BasketItem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BasketItem) SetType(v string) {
	o.Type = &v
}

// GetRevenueShare returns the RevenueShare field value if set, zero value otherwise.
func (o *BasketItem) GetRevenueShare() []RevenueShare {
	if o == nil || IsNil(o.RevenueShare) {
		var ret []RevenueShare
		return ret
	}
	return o.RevenueShare
}

// GetRevenueShareOk returns a tuple with the RevenueShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketItem) GetRevenueShareOk() ([]RevenueShare, bool) {
	if o == nil || IsNil(o.RevenueShare) {
		return nil, false
	}
	return o.RevenueShare, true
}

// HasRevenueShare returns a boolean if a field has been set.
func (o *BasketItem) HasRevenueShare() bool {
	if o != nil && !IsNil(o.RevenueShare) {
		return true
	}

	return false
}

// SetRevenueShare gets a reference to the given []RevenueShare and assigns it to the RevenueShare field.
func (o *BasketItem) SetRevenueShare(v []RevenueShare) {
	o.RevenueShare = v
}

func (o BasketItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasketItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Qty) {
		toSerialize["qty"] = o.Qty
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RevenueShare) {
		toSerialize["revenue_share"] = o.RevenueShare
	}
	return toSerialize, nil
}

type NullableBasketItem struct {
	value *BasketItem
	isSet bool
}

func (v NullableBasketItem) Get() *BasketItem {
	return v.value
}

func (v *NullableBasketItem) Set(val *BasketItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBasketItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBasketItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasketItem(val *BasketItem) *NullableBasketItem {
	return &NullableBasketItem{value: val, isSet: true}
}

func (v NullableBasketItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasketItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


