/*
Tebex Checkout API

Testing RecurringPaymentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package TebexCheckout

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_TebexCheckout_RecurringPaymentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RecurringPaymentsAPIService CancelRecurringPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reference string

		resp, httpRes, err := apiClient.RecurringPaymentsAPI.CancelRecurringPayment(context.Background(), reference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringPaymentsAPIService GetRecurringPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reference string

		resp, httpRes, err := apiClient.RecurringPaymentsAPI.GetRecurringPayment(context.Background(), reference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringPaymentsAPIService UpdateRecurringPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reference string

		resp, httpRes, err := apiClient.RecurringPaymentsAPI.UpdateRecurringPayment(context.Background(), reference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringPaymentsAPIService UpdateSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reference string

		resp, httpRes, err := apiClient.RecurringPaymentsAPI.UpdateSubscription(context.Background(), reference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
