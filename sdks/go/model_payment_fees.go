/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the PaymentFees type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentFees{}

// PaymentFees struct for PaymentFees
type PaymentFees struct {
	Tax *PaymentFeesTax `json:"tax,omitempty"`
	Gateway *PaymentFeesGateway `json:"gateway,omitempty"`
}

// NewPaymentFees instantiates a new PaymentFees object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentFees() *PaymentFees {
	this := PaymentFees{}
	return &this
}

// NewPaymentFeesWithDefaults instantiates a new PaymentFees object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentFeesWithDefaults() *PaymentFees {
	this := PaymentFees{}
	return &this
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *PaymentFees) GetTax() PaymentFeesTax {
	if o == nil || IsNil(o.Tax) {
		var ret PaymentFeesTax
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFees) GetTaxOk() (*PaymentFeesTax, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *PaymentFees) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given PaymentFeesTax and assigns it to the Tax field.
func (o *PaymentFees) SetTax(v PaymentFeesTax) {
	o.Tax = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *PaymentFees) GetGateway() PaymentFeesGateway {
	if o == nil || IsNil(o.Gateway) {
		var ret PaymentFeesGateway
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentFees) GetGatewayOk() (*PaymentFeesGateway, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *PaymentFees) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given PaymentFeesGateway and assigns it to the Gateway field.
func (o *PaymentFees) SetGateway(v PaymentFeesGateway) {
	o.Gateway = &v
}

func (o PaymentFees) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentFees) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	return toSerialize, nil
}

type NullablePaymentFees struct {
	value *PaymentFees
	isSet bool
}

func (v NullablePaymentFees) Get() *PaymentFees {
	return v.value
}

func (v *NullablePaymentFees) Set(val *PaymentFees) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentFees) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentFees) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentFees(val *PaymentFees) *NullablePaymentFees {
	return &NullablePaymentFees{value: val, isSet: true}
}

func (v NullablePaymentFees) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentFees) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


