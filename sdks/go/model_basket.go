/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the Basket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Basket{}

// Basket struct for Basket
type Basket struct {
	Ident *string `json:"ident,omitempty"`
	Expire *string `json:"expire,omitempty"`
	Price *float32 `json:"price,omitempty"`
	PriceDetails *PriceDetails `json:"priceDetails,omitempty"`
	Type *string `json:"type,omitempty"`
	Recurring *bool `json:"recurring,omitempty"`
	RecurringPeriod map[string]interface{} `json:"recurringPeriod,omitempty"`
	RecurringNextPaymentDate NullableString `json:"recurringNextPaymentDate,omitempty"`
	IsPaymentMethodUpdate *bool `json:"isPaymentMethodUpdate,omitempty"`
	ReturnUrl NullableString `json:"returnUrl,omitempty"`
	Complete *bool `json:"complete,omitempty"`
	Tax map[string]interface{} `json:"tax,omitempty"`
	Username NullableString `json:"username,omitempty"`
	Discounts []map[string]interface{} `json:"discounts,omitempty"`
	Coupons []map[string]interface{} `json:"coupons,omitempty"`
	Giftcards []map[string]interface{} `json:"giftcards,omitempty"`
	Address *Address `json:"address,omitempty"`
	Rows []BasketItem `json:"rows,omitempty"`
	// Browser fingerprint to identify the user
	Fingerprint NullableString `json:"fingerprint,omitempty"`
	// The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes
	CreatorCode *string `json:"creator_code,omitempty"`
	Roundup NullableBool `json:"roundup,omitempty"`
	CancelUrl *string `json:"cancel_url,omitempty"`
	CompleteUrl NullableString `json:"complete_url,omitempty"`
	CompleteAutoRedirect *bool `json:"complete_auto_redirect,omitempty"`
	Custom map[string]interface{} `json:"custom,omitempty"`
	Links *BasketLinks `json:"links,omitempty"`
}

// NewBasket instantiates a new Basket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasket() *Basket {
	this := Basket{}
	return &this
}

// NewBasketWithDefaults instantiates a new Basket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasketWithDefaults() *Basket {
	this := Basket{}
	return &this
}

// GetIdent returns the Ident field value if set, zero value otherwise.
func (o *Basket) GetIdent() string {
	if o == nil || IsNil(o.Ident) {
		var ret string
		return ret
	}
	return *o.Ident
}

// GetIdentOk returns a tuple with the Ident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetIdentOk() (*string, bool) {
	if o == nil || IsNil(o.Ident) {
		return nil, false
	}
	return o.Ident, true
}

// HasIdent returns a boolean if a field has been set.
func (o *Basket) HasIdent() bool {
	if o != nil && !IsNil(o.Ident) {
		return true
	}

	return false
}

// SetIdent gets a reference to the given string and assigns it to the Ident field.
func (o *Basket) SetIdent(v string) {
	o.Ident = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *Basket) GetExpire() string {
	if o == nil || IsNil(o.Expire) {
		var ret string
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetExpireOk() (*string, bool) {
	if o == nil || IsNil(o.Expire) {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *Basket) HasExpire() bool {
	if o != nil && !IsNil(o.Expire) {
		return true
	}

	return false
}

// SetExpire gets a reference to the given string and assigns it to the Expire field.
func (o *Basket) SetExpire(v string) {
	o.Expire = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Basket) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Basket) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *Basket) SetPrice(v float32) {
	o.Price = &v
}

// GetPriceDetails returns the PriceDetails field value if set, zero value otherwise.
func (o *Basket) GetPriceDetails() PriceDetails {
	if o == nil || IsNil(o.PriceDetails) {
		var ret PriceDetails
		return ret
	}
	return *o.PriceDetails
}

// GetPriceDetailsOk returns a tuple with the PriceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetPriceDetailsOk() (*PriceDetails, bool) {
	if o == nil || IsNil(o.PriceDetails) {
		return nil, false
	}
	return o.PriceDetails, true
}

// HasPriceDetails returns a boolean if a field has been set.
func (o *Basket) HasPriceDetails() bool {
	if o != nil && !IsNil(o.PriceDetails) {
		return true
	}

	return false
}

// SetPriceDetails gets a reference to the given PriceDetails and assigns it to the PriceDetails field.
func (o *Basket) SetPriceDetails(v PriceDetails) {
	o.PriceDetails = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Basket) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Basket) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Basket) SetType(v string) {
	o.Type = &v
}

// GetRecurring returns the Recurring field value if set, zero value otherwise.
func (o *Basket) GetRecurring() bool {
	if o == nil || IsNil(o.Recurring) {
		var ret bool
		return ret
	}
	return *o.Recurring
}

// GetRecurringOk returns a tuple with the Recurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetRecurringOk() (*bool, bool) {
	if o == nil || IsNil(o.Recurring) {
		return nil, false
	}
	return o.Recurring, true
}

// HasRecurring returns a boolean if a field has been set.
func (o *Basket) HasRecurring() bool {
	if o != nil && !IsNil(o.Recurring) {
		return true
	}

	return false
}

// SetRecurring gets a reference to the given bool and assigns it to the Recurring field.
func (o *Basket) SetRecurring(v bool) {
	o.Recurring = &v
}

// GetRecurringPeriod returns the RecurringPeriod field value if set, zero value otherwise.
func (o *Basket) GetRecurringPeriod() map[string]interface{} {
	if o == nil || IsNil(o.RecurringPeriod) {
		var ret map[string]interface{}
		return ret
	}
	return o.RecurringPeriod
}

// GetRecurringPeriodOk returns a tuple with the RecurringPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetRecurringPeriodOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RecurringPeriod) {
		return map[string]interface{}{}, false
	}
	return o.RecurringPeriod, true
}

// HasRecurringPeriod returns a boolean if a field has been set.
func (o *Basket) HasRecurringPeriod() bool {
	if o != nil && !IsNil(o.RecurringPeriod) {
		return true
	}

	return false
}

// SetRecurringPeriod gets a reference to the given map[string]interface{} and assigns it to the RecurringPeriod field.
func (o *Basket) SetRecurringPeriod(v map[string]interface{}) {
	o.RecurringPeriod = v
}

// GetRecurringNextPaymentDate returns the RecurringNextPaymentDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetRecurringNextPaymentDate() string {
	if o == nil || IsNil(o.RecurringNextPaymentDate.Get()) {
		var ret string
		return ret
	}
	return *o.RecurringNextPaymentDate.Get()
}

// GetRecurringNextPaymentDateOk returns a tuple with the RecurringNextPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetRecurringNextPaymentDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringNextPaymentDate.Get(), o.RecurringNextPaymentDate.IsSet()
}

// HasRecurringNextPaymentDate returns a boolean if a field has been set.
func (o *Basket) HasRecurringNextPaymentDate() bool {
	if o != nil && o.RecurringNextPaymentDate.IsSet() {
		return true
	}

	return false
}

// SetRecurringNextPaymentDate gets a reference to the given NullableString and assigns it to the RecurringNextPaymentDate field.
func (o *Basket) SetRecurringNextPaymentDate(v string) {
	o.RecurringNextPaymentDate.Set(&v)
}
// SetRecurringNextPaymentDateNil sets the value for RecurringNextPaymentDate to be an explicit nil
func (o *Basket) SetRecurringNextPaymentDateNil() {
	o.RecurringNextPaymentDate.Set(nil)
}

// UnsetRecurringNextPaymentDate ensures that no value is present for RecurringNextPaymentDate, not even an explicit nil
func (o *Basket) UnsetRecurringNextPaymentDate() {
	o.RecurringNextPaymentDate.Unset()
}

// GetIsPaymentMethodUpdate returns the IsPaymentMethodUpdate field value if set, zero value otherwise.
func (o *Basket) GetIsPaymentMethodUpdate() bool {
	if o == nil || IsNil(o.IsPaymentMethodUpdate) {
		var ret bool
		return ret
	}
	return *o.IsPaymentMethodUpdate
}

// GetIsPaymentMethodUpdateOk returns a tuple with the IsPaymentMethodUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetIsPaymentMethodUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaymentMethodUpdate) {
		return nil, false
	}
	return o.IsPaymentMethodUpdate, true
}

// HasIsPaymentMethodUpdate returns a boolean if a field has been set.
func (o *Basket) HasIsPaymentMethodUpdate() bool {
	if o != nil && !IsNil(o.IsPaymentMethodUpdate) {
		return true
	}

	return false
}

// SetIsPaymentMethodUpdate gets a reference to the given bool and assigns it to the IsPaymentMethodUpdate field.
func (o *Basket) SetIsPaymentMethodUpdate(v bool) {
	o.IsPaymentMethodUpdate = &v
}

// GetReturnUrl returns the ReturnUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetReturnUrl() string {
	if o == nil || IsNil(o.ReturnUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ReturnUrl.Get()
}

// GetReturnUrlOk returns a tuple with the ReturnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetReturnUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReturnUrl.Get(), o.ReturnUrl.IsSet()
}

// HasReturnUrl returns a boolean if a field has been set.
func (o *Basket) HasReturnUrl() bool {
	if o != nil && o.ReturnUrl.IsSet() {
		return true
	}

	return false
}

// SetReturnUrl gets a reference to the given NullableString and assigns it to the ReturnUrl field.
func (o *Basket) SetReturnUrl(v string) {
	o.ReturnUrl.Set(&v)
}
// SetReturnUrlNil sets the value for ReturnUrl to be an explicit nil
func (o *Basket) SetReturnUrlNil() {
	o.ReturnUrl.Set(nil)
}

// UnsetReturnUrl ensures that no value is present for ReturnUrl, not even an explicit nil
func (o *Basket) UnsetReturnUrl() {
	o.ReturnUrl.Unset()
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *Basket) GetComplete() bool {
	if o == nil || IsNil(o.Complete) {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCompleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Complete) {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *Basket) HasComplete() bool {
	if o != nil && !IsNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *Basket) SetComplete(v bool) {
	o.Complete = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *Basket) GetTax() map[string]interface{} {
	if o == nil || IsNil(o.Tax) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetTaxOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tax) {
		return map[string]interface{}{}, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *Basket) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given map[string]interface{} and assigns it to the Tax field.
func (o *Basket) SetTax(v map[string]interface{}) {
	o.Tax = v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *Basket) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *Basket) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *Basket) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *Basket) UnsetUsername() {
	o.Username.Unset()
}

// GetDiscounts returns the Discounts field value if set, zero value otherwise.
func (o *Basket) GetDiscounts() []map[string]interface{} {
	if o == nil || IsNil(o.Discounts) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetDiscountsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Discounts) {
		return nil, false
	}
	return o.Discounts, true
}

// HasDiscounts returns a boolean if a field has been set.
func (o *Basket) HasDiscounts() bool {
	if o != nil && !IsNil(o.Discounts) {
		return true
	}

	return false
}

// SetDiscounts gets a reference to the given []map[string]interface{} and assigns it to the Discounts field.
func (o *Basket) SetDiscounts(v []map[string]interface{}) {
	o.Discounts = v
}

// GetCoupons returns the Coupons field value if set, zero value otherwise.
func (o *Basket) GetCoupons() []map[string]interface{} {
	if o == nil || IsNil(o.Coupons) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Coupons
}

// GetCouponsOk returns a tuple with the Coupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCouponsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Coupons) {
		return nil, false
	}
	return o.Coupons, true
}

// HasCoupons returns a boolean if a field has been set.
func (o *Basket) HasCoupons() bool {
	if o != nil && !IsNil(o.Coupons) {
		return true
	}

	return false
}

// SetCoupons gets a reference to the given []map[string]interface{} and assigns it to the Coupons field.
func (o *Basket) SetCoupons(v []map[string]interface{}) {
	o.Coupons = v
}

// GetGiftcards returns the Giftcards field value if set, zero value otherwise.
func (o *Basket) GetGiftcards() []map[string]interface{} {
	if o == nil || IsNil(o.Giftcards) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Giftcards
}

// GetGiftcardsOk returns a tuple with the Giftcards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetGiftcardsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Giftcards) {
		return nil, false
	}
	return o.Giftcards, true
}

// HasGiftcards returns a boolean if a field has been set.
func (o *Basket) HasGiftcards() bool {
	if o != nil && !IsNil(o.Giftcards) {
		return true
	}

	return false
}

// SetGiftcards gets a reference to the given []map[string]interface{} and assigns it to the Giftcards field.
func (o *Basket) SetGiftcards(v []map[string]interface{}) {
	o.Giftcards = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Basket) GetAddress() Address {
	if o == nil || IsNil(o.Address) {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Basket) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *Basket) SetAddress(v Address) {
	o.Address = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *Basket) GetRows() []BasketItem {
	if o == nil || IsNil(o.Rows) {
		var ret []BasketItem
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetRowsOk() ([]BasketItem, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *Basket) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []BasketItem and assigns it to the Rows field.
func (o *Basket) SetRows(v []BasketItem) {
	o.Rows = v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint.Get()) {
		var ret string
		return ret
	}
	return *o.Fingerprint.Get()
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fingerprint.Get(), o.Fingerprint.IsSet()
}

// HasFingerprint returns a boolean if a field has been set.
func (o *Basket) HasFingerprint() bool {
	if o != nil && o.Fingerprint.IsSet() {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given NullableString and assigns it to the Fingerprint field.
func (o *Basket) SetFingerprint(v string) {
	o.Fingerprint.Set(&v)
}
// SetFingerprintNil sets the value for Fingerprint to be an explicit nil
func (o *Basket) SetFingerprintNil() {
	o.Fingerprint.Set(nil)
}

// UnsetFingerprint ensures that no value is present for Fingerprint, not even an explicit nil
func (o *Basket) UnsetFingerprint() {
	o.Fingerprint.Unset()
}

// GetCreatorCode returns the CreatorCode field value if set, zero value otherwise.
func (o *Basket) GetCreatorCode() string {
	if o == nil || IsNil(o.CreatorCode) {
		var ret string
		return ret
	}
	return *o.CreatorCode
}

// GetCreatorCodeOk returns a tuple with the CreatorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCreatorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorCode) {
		return nil, false
	}
	return o.CreatorCode, true
}

// HasCreatorCode returns a boolean if a field has been set.
func (o *Basket) HasCreatorCode() bool {
	if o != nil && !IsNil(o.CreatorCode) {
		return true
	}

	return false
}

// SetCreatorCode gets a reference to the given string and assigns it to the CreatorCode field.
func (o *Basket) SetCreatorCode(v string) {
	o.CreatorCode = &v
}

// GetRoundup returns the Roundup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetRoundup() bool {
	if o == nil || IsNil(o.Roundup.Get()) {
		var ret bool
		return ret
	}
	return *o.Roundup.Get()
}

// GetRoundupOk returns a tuple with the Roundup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetRoundupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roundup.Get(), o.Roundup.IsSet()
}

// HasRoundup returns a boolean if a field has been set.
func (o *Basket) HasRoundup() bool {
	if o != nil && o.Roundup.IsSet() {
		return true
	}

	return false
}

// SetRoundup gets a reference to the given NullableBool and assigns it to the Roundup field.
func (o *Basket) SetRoundup(v bool) {
	o.Roundup.Set(&v)
}
// SetRoundupNil sets the value for Roundup to be an explicit nil
func (o *Basket) SetRoundupNil() {
	o.Roundup.Set(nil)
}

// UnsetRoundup ensures that no value is present for Roundup, not even an explicit nil
func (o *Basket) UnsetRoundup() {
	o.Roundup.Unset()
}

// GetCancelUrl returns the CancelUrl field value if set, zero value otherwise.
func (o *Basket) GetCancelUrl() string {
	if o == nil || IsNil(o.CancelUrl) {
		var ret string
		return ret
	}
	return *o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCancelUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CancelUrl) {
		return nil, false
	}
	return o.CancelUrl, true
}

// HasCancelUrl returns a boolean if a field has been set.
func (o *Basket) HasCancelUrl() bool {
	if o != nil && !IsNil(o.CancelUrl) {
		return true
	}

	return false
}

// SetCancelUrl gets a reference to the given string and assigns it to the CancelUrl field.
func (o *Basket) SetCancelUrl(v string) {
	o.CancelUrl = &v
}

// GetCompleteUrl returns the CompleteUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetCompleteUrl() string {
	if o == nil || IsNil(o.CompleteUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CompleteUrl.Get()
}

// GetCompleteUrlOk returns a tuple with the CompleteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetCompleteUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompleteUrl.Get(), o.CompleteUrl.IsSet()
}

// HasCompleteUrl returns a boolean if a field has been set.
func (o *Basket) HasCompleteUrl() bool {
	if o != nil && o.CompleteUrl.IsSet() {
		return true
	}

	return false
}

// SetCompleteUrl gets a reference to the given NullableString and assigns it to the CompleteUrl field.
func (o *Basket) SetCompleteUrl(v string) {
	o.CompleteUrl.Set(&v)
}
// SetCompleteUrlNil sets the value for CompleteUrl to be an explicit nil
func (o *Basket) SetCompleteUrlNil() {
	o.CompleteUrl.Set(nil)
}

// UnsetCompleteUrl ensures that no value is present for CompleteUrl, not even an explicit nil
func (o *Basket) UnsetCompleteUrl() {
	o.CompleteUrl.Unset()
}

// GetCompleteAutoRedirect returns the CompleteAutoRedirect field value if set, zero value otherwise.
func (o *Basket) GetCompleteAutoRedirect() bool {
	if o == nil || IsNil(o.CompleteAutoRedirect) {
		var ret bool
		return ret
	}
	return *o.CompleteAutoRedirect
}

// GetCompleteAutoRedirectOk returns a tuple with the CompleteAutoRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCompleteAutoRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.CompleteAutoRedirect) {
		return nil, false
	}
	return o.CompleteAutoRedirect, true
}

// HasCompleteAutoRedirect returns a boolean if a field has been set.
func (o *Basket) HasCompleteAutoRedirect() bool {
	if o != nil && !IsNil(o.CompleteAutoRedirect) {
		return true
	}

	return false
}

// SetCompleteAutoRedirect gets a reference to the given bool and assigns it to the CompleteAutoRedirect field.
func (o *Basket) SetCompleteAutoRedirect(v bool) {
	o.CompleteAutoRedirect = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetCustom() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetCustomOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Custom) {
		return map[string]interface{}{}, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *Basket) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given map[string]interface{} and assigns it to the Custom field.
func (o *Basket) SetCustom(v map[string]interface{}) {
	o.Custom = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Basket) GetLinks() BasketLinks {
	if o == nil || IsNil(o.Links) {
		var ret BasketLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetLinksOk() (*BasketLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Basket) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given BasketLinks and assigns it to the Links field.
func (o *Basket) SetLinks(v BasketLinks) {
	o.Links = &v
}

func (o Basket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Basket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ident) {
		toSerialize["ident"] = o.Ident
	}
	if !IsNil(o.Expire) {
		toSerialize["expire"] = o.Expire
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceDetails) {
		toSerialize["priceDetails"] = o.PriceDetails
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Recurring) {
		toSerialize["recurring"] = o.Recurring
	}
	if !IsNil(o.RecurringPeriod) {
		toSerialize["recurringPeriod"] = o.RecurringPeriod
	}
	if o.RecurringNextPaymentDate.IsSet() {
		toSerialize["recurringNextPaymentDate"] = o.RecurringNextPaymentDate.Get()
	}
	if !IsNil(o.IsPaymentMethodUpdate) {
		toSerialize["isPaymentMethodUpdate"] = o.IsPaymentMethodUpdate
	}
	if o.ReturnUrl.IsSet() {
		toSerialize["returnUrl"] = o.ReturnUrl.Get()
	}
	if !IsNil(o.Complete) {
		toSerialize["complete"] = o.Complete
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if !IsNil(o.Discounts) {
		toSerialize["discounts"] = o.Discounts
	}
	if !IsNil(o.Coupons) {
		toSerialize["coupons"] = o.Coupons
	}
	if !IsNil(o.Giftcards) {
		toSerialize["giftcards"] = o.Giftcards
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	if o.Fingerprint.IsSet() {
		toSerialize["fingerprint"] = o.Fingerprint.Get()
	}
	if !IsNil(o.CreatorCode) {
		toSerialize["creator_code"] = o.CreatorCode
	}
	if o.Roundup.IsSet() {
		toSerialize["roundup"] = o.Roundup.Get()
	}
	if !IsNil(o.CancelUrl) {
		toSerialize["cancel_url"] = o.CancelUrl
	}
	if o.CompleteUrl.IsSet() {
		toSerialize["complete_url"] = o.CompleteUrl.Get()
	}
	if !IsNil(o.CompleteAutoRedirect) {
		toSerialize["complete_auto_redirect"] = o.CompleteAutoRedirect
	}
	if o.Custom != nil {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableBasket struct {
	value *Basket
	isSet bool
}

func (v NullableBasket) Get() *Basket {
	return v.value
}

func (v *NullableBasket) Set(val *Basket) {
	v.value = val
	v.isSet = true
}

func (v NullableBasket) IsSet() bool {
	return v.isSet
}

func (v *NullableBasket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasket(val *Basket) *NullableBasket {
	return &NullableBasket{value: val, isSet: true}
}

func (v NullableBasket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


