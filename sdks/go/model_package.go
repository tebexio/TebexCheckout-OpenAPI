/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the Package type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Package{}

// Package struct for Package
type Package struct {
	// The name of the item being purchased. This should be user-friendly as it is shown to the customer on checkout and receipts.
	Name *string `json:"name,omitempty"`
	// A float (decimal describing the price of the package in your account currency)
	Price *float32 `json:"price,omitempty"`
	// The renewal period of this item
	ExpiryPeriod *string `json:"expiry_period,omitempty"`
	// An integer representing the number of `expiry_periods` that make up the renewal period.
	ExpiryLength *int32 `json:"expiry_length,omitempty"`
	MetaData *PackageMetaData `json:"metaData,omitempty"`
}

// NewPackage instantiates a new Package object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackage() *Package {
	this := Package{}
	return &this
}

// NewPackageWithDefaults instantiates a new Package object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageWithDefaults() *Package {
	this := Package{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Package) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Package) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Package) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Package) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Package) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *Package) SetPrice(v float32) {
	o.Price = &v
}

// GetExpiryPeriod returns the ExpiryPeriod field value if set, zero value otherwise.
func (o *Package) GetExpiryPeriod() string {
	if o == nil || IsNil(o.ExpiryPeriod) {
		var ret string
		return ret
	}
	return *o.ExpiryPeriod
}

// GetExpiryPeriodOk returns a tuple with the ExpiryPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetExpiryPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryPeriod) {
		return nil, false
	}
	return o.ExpiryPeriod, true
}

// HasExpiryPeriod returns a boolean if a field has been set.
func (o *Package) HasExpiryPeriod() bool {
	if o != nil && !IsNil(o.ExpiryPeriod) {
		return true
	}

	return false
}

// SetExpiryPeriod gets a reference to the given string and assigns it to the ExpiryPeriod field.
func (o *Package) SetExpiryPeriod(v string) {
	o.ExpiryPeriod = &v
}

// GetExpiryLength returns the ExpiryLength field value if set, zero value otherwise.
func (o *Package) GetExpiryLength() int32 {
	if o == nil || IsNil(o.ExpiryLength) {
		var ret int32
		return ret
	}
	return *o.ExpiryLength
}

// GetExpiryLengthOk returns a tuple with the ExpiryLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetExpiryLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiryLength) {
		return nil, false
	}
	return o.ExpiryLength, true
}

// HasExpiryLength returns a boolean if a field has been set.
func (o *Package) HasExpiryLength() bool {
	if o != nil && !IsNil(o.ExpiryLength) {
		return true
	}

	return false
}

// SetExpiryLength gets a reference to the given int32 and assigns it to the ExpiryLength field.
func (o *Package) SetExpiryLength(v int32) {
	o.ExpiryLength = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *Package) GetMetaData() PackageMetaData {
	if o == nil || IsNil(o.MetaData) {
		var ret PackageMetaData
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetMetaDataOk() (*PackageMetaData, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *Package) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given PackageMetaData and assigns it to the MetaData field.
func (o *Package) SetMetaData(v PackageMetaData) {
	o.MetaData = &v
}

func (o Package) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Package) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.ExpiryPeriod) {
		toSerialize["expiry_period"] = o.ExpiryPeriod
	}
	if !IsNil(o.ExpiryLength) {
		toSerialize["expiry_length"] = o.ExpiryLength
	}
	if !IsNil(o.MetaData) {
		toSerialize["metaData"] = o.MetaData
	}
	return toSerialize, nil
}

type NullablePackage struct {
	value *Package
	isSet bool
}

func (v NullablePackage) Get() *Package {
	return v.value
}

func (v *NullablePackage) Set(val *Package) {
	v.value = val
	v.isSet = true
}

func (v NullablePackage) IsSet() bool {
	return v.isSet
}

func (v *NullablePackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackage(val *Package) *NullablePackage {
	return &NullablePackage{value: val, isSet: true}
}

func (v NullablePackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


