/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the PaymentCustom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentCustom{}

// PaymentCustom struct for PaymentCustom
type PaymentCustom struct {
	User *string `json:"user,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

// NewPaymentCustom instantiates a new PaymentCustom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentCustom() *PaymentCustom {
	this := PaymentCustom{}
	return &this
}

// NewPaymentCustomWithDefaults instantiates a new PaymentCustom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentCustomWithDefaults() *PaymentCustom {
	this := PaymentCustom{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PaymentCustom) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCustom) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PaymentCustom) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *PaymentCustom) SetUser(v string) {
	o.User = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *PaymentCustom) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCustom) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *PaymentCustom) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *PaymentCustom) SetRef(v string) {
	o.Ref = &v
}

func (o PaymentCustom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentCustom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	return toSerialize, nil
}

type NullablePaymentCustom struct {
	value *PaymentCustom
	isSet bool
}

func (v NullablePaymentCustom) Get() *PaymentCustom {
	return v.value
}

func (v *NullablePaymentCustom) Set(val *PaymentCustom) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentCustom) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentCustom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentCustom(val *PaymentCustom) *NullablePaymentCustom {
	return &NullablePaymentCustom{value: val, isSet: true}
}

func (v NullablePaymentCustom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentCustom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


