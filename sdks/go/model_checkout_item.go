/*
Tebex Checkout API

The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexCheckout

import (
	"encoding/json"
)

// checks if the CheckoutItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutItem{}

// CheckoutItem An item added to a basket as part of the `/checkout` request.
type CheckoutItem struct {
	Package *Package `json:"package,omitempty"`
}

// NewCheckoutItem instantiates a new CheckoutItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutItem() *CheckoutItem {
	this := CheckoutItem{}
	return &this
}

// NewCheckoutItemWithDefaults instantiates a new CheckoutItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutItemWithDefaults() *CheckoutItem {
	this := CheckoutItem{}
	return &this
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *CheckoutItem) GetPackage() Package {
	if o == nil || IsNil(o.Package) {
		var ret Package
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutItem) GetPackageOk() (*Package, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *CheckoutItem) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given Package and assigns it to the Package field.
func (o *CheckoutItem) SetPackage(v Package) {
	o.Package = &v
}

func (o CheckoutItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	return toSerialize, nil
}

type NullableCheckoutItem struct {
	value *CheckoutItem
	isSet bool
}

func (v NullableCheckoutItem) Get() *CheckoutItem {
	return v.value
}

func (v *NullableCheckoutItem) Set(val *CheckoutItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutItem(val *CheckoutItem) *NullableCheckoutItem {
	return &NullableCheckoutItem{value: val, isSet: true}
}

func (v NullableCheckoutItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


