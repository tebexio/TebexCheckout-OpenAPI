=begin
#Tebex Checkout API

#The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

The version of the OpenAPI document: 1.0.0
Contact: tebex-integrations@overwolf.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::RecurringPaymentsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RecurringPaymentsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::RecurringPaymentsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RecurringPaymentsApi' do
    it 'should create an instance of RecurringPaymentsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::RecurringPaymentsApi)
    end
  end

  # unit tests for cancel_recurring_payment
  # Cancel a recurring payment
  # This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
  # @param reference The recurring payment reference to cancel.
  # @param [Hash] opts the optional parameters
  # @return [RecurringPayment]
  describe 'cancel_recurring_payment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recurring_payment
  # Fetch a recurring payment (subscription) by its reference
  # @param reference The recurring payment reference to fetch.
  # @param [Hash] opts the optional parameters
  # @return [RecurringPayment]
  describe 'get_recurring_payment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_recurring_payment
  # Pause or reactivate a recurring payment
  # @param reference The recurring payment reference to update.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateRecurringPaymentRequest] :update_recurring_payment_request 
  # @return [RecurringPayment]
  describe 'update_recurring_payment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_subscription
  # Update a subscription with a new product / amount to pay - replacing the existing product
  # If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
  # @param reference The recurring payment reference to fetch.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateSubscriptionRequest] :update_subscription_request 
  # @return [RecurringPayment]
  describe 'update_subscription test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
