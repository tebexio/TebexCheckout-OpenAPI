=begin
#Tebex Checkout API

#The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.

The version of the OpenAPI document: 1.0.0
Contact: tebex-integrations@overwolf.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module OpenapiClient
  class PaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetch a payment by its transaction ID
    # This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with `tbx-`
    # @param txn_id [String] The payment reference to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def get_payment_by_id(txn_id, opts = {})
      data, _status_code, _headers = get_payment_by_id_with_http_info(txn_id, opts)
      data
    end

    # Fetch a payment by its transaction ID
    # This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
    # @param txn_id [String] The payment reference to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def get_payment_by_id_with_http_info(txn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.get_payment_by_id ...'
      end
      # verify the required parameter 'txn_id' is set
      if @api_client.config.client_side_validation && txn_id.nil?
        fail ArgumentError, "Missing the required parameter 'txn_id' when calling PaymentsApi.get_payment_by_id"
      end
      # resource path
      local_var_path = '/payments/{txnId}?type=txn_id'.sub('{' + 'txnId' + '}', CGI.escape(txn_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentsApi.get_payment_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_payment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refund a payment by its transaction ID
    # This will refund the given payment associated with this transaction id.
    # @param txn_id [String] The payment reference to refund.
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def refund_payment_by_id(txn_id, opts = {})
      data, _status_code, _headers = refund_payment_by_id_with_http_info(txn_id, opts)
      data
    end

    # Refund a payment by its transaction ID
    # This will refund the given payment associated with this transaction id.
    # @param txn_id [String] The payment reference to refund.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def refund_payment_by_id_with_http_info(txn_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.refund_payment_by_id ...'
      end
      # verify the required parameter 'txn_id' is set
      if @api_client.config.client_side_validation && txn_id.nil?
        fail ArgumentError, "Missing the required parameter 'txn_id' when calling PaymentsApi.refund_payment_by_id"
      end
      # resource path
      local_var_path = '/payments/{txnId}/refund?type=txn_id'.sub('{' + 'txnId' + '}', CGI.escape(txn_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentsApi.refund_payment_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#refund_payment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
