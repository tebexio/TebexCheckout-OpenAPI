/*
 * Tebex Checkout API
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PaymentCustom;
import org.openapitools.client.model.PaymentCustomer;
import org.openapitools.client.model.PaymentFees;
import org.openapitools.client.model.PaymentPrice;
import org.openapitools.client.model.PaymentProductsInner;
import org.openapitools.client.model.PaymentStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import TebexCheckout.JSON;

/**
 * Payment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-14T12:22:39.312899-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class Payment {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PaymentStatus status;

  public static final String SERIALIZED_NAME_PAYMENT_SEQUENCE = "payment_sequence";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SEQUENCE)
  private String paymentSequence;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private PaymentPrice price;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private PaymentFees fees;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private PaymentCustomer customer;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<PaymentProductsInner> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUPONS = "coupons";
  @SerializedName(SERIALIZED_NAME_COUPONS)
  private List<String> coupons = new ArrayList<>();

  public static final String SERIALIZED_NAME_GIFT_CARDS = "gift_cards";
  @SerializedName(SERIALIZED_NAME_GIFT_CARDS)
  private List<String> giftCards = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECURRING_PAYMENT_REFERENCE = "recurring_payment_reference";
  @SerializedName(SERIALIZED_NAME_RECURRING_PAYMENT_REFERENCE)
  private String recurringPaymentReference;

  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  private PaymentCustom custom;

  public Payment() {
  }

  public Payment transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public Payment status(PaymentStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public PaymentStatus getStatus() {
    return status;
  }

  public void setStatus(PaymentStatus status) {
    this.status = status;
  }


  public Payment paymentSequence(String paymentSequence) {
    this.paymentSequence = paymentSequence;
    return this;
  }

   /**
   * Get paymentSequence
   * @return paymentSequence
  **/
  @javax.annotation.Nullable
  public String getPaymentSequence() {
    return paymentSequence;
  }

  public void setPaymentSequence(String paymentSequence) {
    this.paymentSequence = paymentSequence;
  }


  public Payment createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Payment price(PaymentPrice price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  public PaymentPrice getPrice() {
    return price;
  }

  public void setPrice(PaymentPrice price) {
    this.price = price;
  }


  public Payment fees(PaymentFees fees) {
    this.fees = fees;
    return this;
  }

   /**
   * Get fees
   * @return fees
  **/
  @javax.annotation.Nullable
  public PaymentFees getFees() {
    return fees;
  }

  public void setFees(PaymentFees fees) {
    this.fees = fees;
  }


  public Payment customer(PaymentCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  public PaymentCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(PaymentCustomer customer) {
    this.customer = customer;
  }


  public Payment products(List<PaymentProductsInner> products) {
    this.products = products;
    return this;
  }

  public Payment addProductsItem(PaymentProductsInner productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

   /**
   * Get products
   * @return products
  **/
  @javax.annotation.Nullable
  public List<PaymentProductsInner> getProducts() {
    return products;
  }

  public void setProducts(List<PaymentProductsInner> products) {
    this.products = products;
  }


  public Payment coupons(List<String> coupons) {
    this.coupons = coupons;
    return this;
  }

  public Payment addCouponsItem(String couponsItem) {
    if (this.coupons == null) {
      this.coupons = new ArrayList<>();
    }
    this.coupons.add(couponsItem);
    return this;
  }

   /**
   * Get coupons
   * @return coupons
  **/
  @javax.annotation.Nullable
  public List<String> getCoupons() {
    return coupons;
  }

  public void setCoupons(List<String> coupons) {
    this.coupons = coupons;
  }


  public Payment giftCards(List<String> giftCards) {
    this.giftCards = giftCards;
    return this;
  }

  public Payment addGiftCardsItem(String giftCardsItem) {
    if (this.giftCards == null) {
      this.giftCards = new ArrayList<>();
    }
    this.giftCards.add(giftCardsItem);
    return this;
  }

   /**
   * Get giftCards
   * @return giftCards
  **/
  @javax.annotation.Nullable
  public List<String> getGiftCards() {
    return giftCards;
  }

  public void setGiftCards(List<String> giftCards) {
    this.giftCards = giftCards;
  }


  public Payment recurringPaymentReference(String recurringPaymentReference) {
    this.recurringPaymentReference = recurringPaymentReference;
    return this;
  }

   /**
   * Get recurringPaymentReference
   * @return recurringPaymentReference
  **/
  @javax.annotation.Nullable
  public String getRecurringPaymentReference() {
    return recurringPaymentReference;
  }

  public void setRecurringPaymentReference(String recurringPaymentReference) {
    this.recurringPaymentReference = recurringPaymentReference;
  }


  public Payment custom(PaymentCustom custom) {
    this.custom = custom;
    return this;
  }

   /**
   * Get custom
   * @return custom
  **/
  @javax.annotation.Nullable
  public PaymentCustom getCustom() {
    return custom;
  }

  public void setCustom(PaymentCustom custom) {
    this.custom = custom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.transactionId, payment.transactionId) &&
        Objects.equals(this.status, payment.status) &&
        Objects.equals(this.paymentSequence, payment.paymentSequence) &&
        Objects.equals(this.createdAt, payment.createdAt) &&
        Objects.equals(this.price, payment.price) &&
        Objects.equals(this.fees, payment.fees) &&
        Objects.equals(this.customer, payment.customer) &&
        Objects.equals(this.products, payment.products) &&
        Objects.equals(this.coupons, payment.coupons) &&
        Objects.equals(this.giftCards, payment.giftCards) &&
        Objects.equals(this.recurringPaymentReference, payment.recurringPaymentReference) &&
        Objects.equals(this.custom, payment.custom);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, status, paymentSequence, createdAt, price, fees, customer, products, coupons, giftCards, recurringPaymentReference, custom);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    paymentSequence: ").append(toIndentedString(paymentSequence)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    coupons: ").append(toIndentedString(coupons)).append("\n");
    sb.append("    giftCards: ").append(toIndentedString(giftCards)).append("\n");
    sb.append("    recurringPaymentReference: ").append(toIndentedString(recurringPaymentReference)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transaction_id");
    openapiFields.add("status");
    openapiFields.add("payment_sequence");
    openapiFields.add("created_at");
    openapiFields.add("price");
    openapiFields.add("fees");
    openapiFields.add("customer");
    openapiFields.add("products");
    openapiFields.add("coupons");
    openapiFields.add("gift_cards");
    openapiFields.add("recurring_payment_reference");
    openapiFields.add("custom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Payment
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payment is not found in the empty JSON string", Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        PaymentStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("payment_sequence") != null && !jsonObj.get("payment_sequence").isJsonNull()) && !jsonObj.get("payment_sequence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_sequence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_sequence").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        PaymentPrice.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `fees`
      if (jsonObj.get("fees") != null && !jsonObj.get("fees").isJsonNull()) {
        PaymentFees.validateJsonElement(jsonObj.get("fees"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        PaymentCustomer.validateJsonElement(jsonObj.get("customer"));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            PaymentProductsInner.validateJsonElement(jsonArrayproducts.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("coupons") != null && !jsonObj.get("coupons").isJsonNull() && !jsonObj.get("coupons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupons` to be an array in the JSON string but got `%s`", jsonObj.get("coupons").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gift_cards") != null && !jsonObj.get("gift_cards").isJsonNull() && !jsonObj.get("gift_cards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gift_cards` to be an array in the JSON string but got `%s`", jsonObj.get("gift_cards").toString()));
      }
      if ((jsonObj.get("recurring_payment_reference") != null && !jsonObj.get("recurring_payment_reference").isJsonNull()) && !jsonObj.get("recurring_payment_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurring_payment_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurring_payment_reference").toString()));
      }
      // validate the optional field `custom`
      if (jsonObj.get("custom") != null && !jsonObj.get("custom").isJsonNull()) {
        PaymentCustom.validateJsonElement(jsonObj.get("custom"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<Payment>() {
           @Override
           public void write(JsonWriter out, Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Payment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Payment
  * @throws IOException if the JSON string is invalid with respect to Payment
  */
  public static Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payment.class);
  }

 /**
  * Convert an instance of Payment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

