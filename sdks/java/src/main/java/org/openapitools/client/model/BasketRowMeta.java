/*
 * Tebex Checkout API
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BasketRowMetaLimits;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import TebexCheckout.JSON;

/**
 * BasketRowMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-14T08:33:53.505068-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class BasketRowMeta {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROWPRICE = "rowprice";
  @SerializedName(SERIALIZED_NAME_ROWPRICE)
  private Float rowprice;

  public static final String SERIALIZED_NAME_INITIALPRICE = "initialprice";
  @SerializedName(SERIALIZED_NAME_INITIALPRICE)
  private Float initialprice;

  public static final String SERIALIZED_NAME_IS_CUMULATIVE = "isCumulative";
  @SerializedName(SERIALIZED_NAME_IS_CUMULATIVE)
  private Boolean isCumulative;

  public static final String SERIALIZED_NAME_REQUIRED_PACKAGES = "requiredPackages";
  @SerializedName(SERIALIZED_NAME_REQUIRED_PACKAGES)
  private List<Integer> requiredPackages = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRES_ANY = "requiresAny";
  @SerializedName(SERIALIZED_NAME_REQUIRES_ANY)
  private Boolean requiresAny;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Boolean category;

  public static final String SERIALIZED_NAME_PRODUCES_GIFT_CARD = "producesGiftCard";
  @SerializedName(SERIALIZED_NAME_PRODUCES_GIFT_CARD)
  private Boolean producesGiftCard;

  public static final String SERIALIZED_NAME_ALLOWS_GIFT_CARDS = "allowsGiftCards";
  @SerializedName(SERIALIZED_NAME_ALLOWS_GIFT_CARDS)
  private Boolean allowsGiftCards;

  public static final String SERIALIZED_NAME_SERVERS = "servers";
  @SerializedName(SERIALIZED_NAME_SERVERS)
  private List<Integer> servers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMITS = "limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private BasketRowMetaLimits limits;

  public static final String SERIALIZED_NAME_HAS_DELIVERABLES = "hasDeliverables";
  @SerializedName(SERIALIZED_NAME_HAS_DELIVERABLES)
  private Boolean hasDeliverables;

  public static final String SERIALIZED_NAME_DELIVERABLE_TYPES = "deliverableTypes";
  @SerializedName(SERIALIZED_NAME_DELIVERABLE_TYPES)
  private List<String> deliverableTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOAD_LINK = "downloadLink";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_LINK)
  private String downloadLink;

  public static final String SERIALIZED_NAME_HAS_SELLER_PROTECTION = "hasSellerProtection";
  @SerializedName(SERIALIZED_NAME_HAS_SELLER_PROTECTION)
  private Boolean hasSellerProtection;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_REVENUE_SHARE = "revenue_share";
  @SerializedName(SERIALIZED_NAME_REVENUE_SHARE)
  private List<Float> revenueShare = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_REALPRICE = "realprice";
  @SerializedName(SERIALIZED_NAME_REALPRICE)
  private Float realprice;

  public BasketRowMeta() {
  }

  public BasketRowMeta name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BasketRowMeta rowprice(Float rowprice) {
    this.rowprice = rowprice;
    return this;
  }

   /**
   * Get rowprice
   * @return rowprice
  **/
  @javax.annotation.Nullable
  public Float getRowprice() {
    return rowprice;
  }

  public void setRowprice(Float rowprice) {
    this.rowprice = rowprice;
  }


  public BasketRowMeta initialprice(Float initialprice) {
    this.initialprice = initialprice;
    return this;
  }

   /**
   * Get initialprice
   * @return initialprice
  **/
  @javax.annotation.Nullable
  public Float getInitialprice() {
    return initialprice;
  }

  public void setInitialprice(Float initialprice) {
    this.initialprice = initialprice;
  }


  public BasketRowMeta isCumulative(Boolean isCumulative) {
    this.isCumulative = isCumulative;
    return this;
  }

   /**
   * Get isCumulative
   * @return isCumulative
  **/
  @javax.annotation.Nullable
  public Boolean getIsCumulative() {
    return isCumulative;
  }

  public void setIsCumulative(Boolean isCumulative) {
    this.isCumulative = isCumulative;
  }


  public BasketRowMeta requiredPackages(List<Integer> requiredPackages) {
    this.requiredPackages = requiredPackages;
    return this;
  }

  public BasketRowMeta addRequiredPackagesItem(Integer requiredPackagesItem) {
    if (this.requiredPackages == null) {
      this.requiredPackages = new ArrayList<>();
    }
    this.requiredPackages.add(requiredPackagesItem);
    return this;
  }

   /**
   * Get requiredPackages
   * @return requiredPackages
  **/
  @javax.annotation.Nullable
  public List<Integer> getRequiredPackages() {
    return requiredPackages;
  }

  public void setRequiredPackages(List<Integer> requiredPackages) {
    this.requiredPackages = requiredPackages;
  }


  public BasketRowMeta requiresAny(Boolean requiresAny) {
    this.requiresAny = requiresAny;
    return this;
  }

   /**
   * Get requiresAny
   * @return requiresAny
  **/
  @javax.annotation.Nullable
  public Boolean getRequiresAny() {
    return requiresAny;
  }

  public void setRequiresAny(Boolean requiresAny) {
    this.requiresAny = requiresAny;
  }


  public BasketRowMeta category(Boolean category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  public Boolean getCategory() {
    return category;
  }

  public void setCategory(Boolean category) {
    this.category = category;
  }


  public BasketRowMeta producesGiftCard(Boolean producesGiftCard) {
    this.producesGiftCard = producesGiftCard;
    return this;
  }

   /**
   * Get producesGiftCard
   * @return producesGiftCard
  **/
  @javax.annotation.Nullable
  public Boolean getProducesGiftCard() {
    return producesGiftCard;
  }

  public void setProducesGiftCard(Boolean producesGiftCard) {
    this.producesGiftCard = producesGiftCard;
  }


  public BasketRowMeta allowsGiftCards(Boolean allowsGiftCards) {
    this.allowsGiftCards = allowsGiftCards;
    return this;
  }

   /**
   * Get allowsGiftCards
   * @return allowsGiftCards
  **/
  @javax.annotation.Nullable
  public Boolean getAllowsGiftCards() {
    return allowsGiftCards;
  }

  public void setAllowsGiftCards(Boolean allowsGiftCards) {
    this.allowsGiftCards = allowsGiftCards;
  }


  public BasketRowMeta servers(List<Integer> servers) {
    this.servers = servers;
    return this;
  }

  public BasketRowMeta addServersItem(Integer serversItem) {
    if (this.servers == null) {
      this.servers = new ArrayList<>();
    }
    this.servers.add(serversItem);
    return this;
  }

   /**
   * Get servers
   * @return servers
  **/
  @javax.annotation.Nullable
  public List<Integer> getServers() {
    return servers;
  }

  public void setServers(List<Integer> servers) {
    this.servers = servers;
  }


  public BasketRowMeta limits(BasketRowMetaLimits limits) {
    this.limits = limits;
    return this;
  }

   /**
   * Get limits
   * @return limits
  **/
  @javax.annotation.Nullable
  public BasketRowMetaLimits getLimits() {
    return limits;
  }

  public void setLimits(BasketRowMetaLimits limits) {
    this.limits = limits;
  }


  public BasketRowMeta hasDeliverables(Boolean hasDeliverables) {
    this.hasDeliverables = hasDeliverables;
    return this;
  }

   /**
   * Get hasDeliverables
   * @return hasDeliverables
  **/
  @javax.annotation.Nullable
  public Boolean getHasDeliverables() {
    return hasDeliverables;
  }

  public void setHasDeliverables(Boolean hasDeliverables) {
    this.hasDeliverables = hasDeliverables;
  }


  public BasketRowMeta deliverableTypes(List<String> deliverableTypes) {
    this.deliverableTypes = deliverableTypes;
    return this;
  }

  public BasketRowMeta addDeliverableTypesItem(String deliverableTypesItem) {
    if (this.deliverableTypes == null) {
      this.deliverableTypes = new ArrayList<>();
    }
    this.deliverableTypes.add(deliverableTypesItem);
    return this;
  }

   /**
   * Get deliverableTypes
   * @return deliverableTypes
  **/
  @javax.annotation.Nullable
  public List<String> getDeliverableTypes() {
    return deliverableTypes;
  }

  public void setDeliverableTypes(List<String> deliverableTypes) {
    this.deliverableTypes = deliverableTypes;
  }


  public BasketRowMeta downloadLink(String downloadLink) {
    this.downloadLink = downloadLink;
    return this;
  }

   /**
   * Get downloadLink
   * @return downloadLink
  **/
  @javax.annotation.Nullable
  public String getDownloadLink() {
    return downloadLink;
  }

  public void setDownloadLink(String downloadLink) {
    this.downloadLink = downloadLink;
  }


  public BasketRowMeta hasSellerProtection(Boolean hasSellerProtection) {
    this.hasSellerProtection = hasSellerProtection;
    return this;
  }

   /**
   * Get hasSellerProtection
   * @return hasSellerProtection
  **/
  @javax.annotation.Nullable
  public Boolean getHasSellerProtection() {
    return hasSellerProtection;
  }

  public void setHasSellerProtection(Boolean hasSellerProtection) {
    this.hasSellerProtection = hasSellerProtection;
  }


  public BasketRowMeta itemType(String itemType) {
    this.itemType = itemType;
    return this;
  }

   /**
   * Get itemType
   * @return itemType
  **/
  @javax.annotation.Nullable
  public String getItemType() {
    return itemType;
  }

  public void setItemType(String itemType) {
    this.itemType = itemType;
  }


  public BasketRowMeta revenueShare(List<Float> revenueShare) {
    this.revenueShare = revenueShare;
    return this;
  }

  public BasketRowMeta addRevenueShareItem(Float revenueShareItem) {
    if (this.revenueShare == null) {
      this.revenueShare = new ArrayList<>();
    }
    this.revenueShare.add(revenueShareItem);
    return this;
  }

   /**
   * Get revenueShare
   * @return revenueShare
  **/
  @javax.annotation.Nullable
  public List<Float> getRevenueShare() {
    return revenueShare;
  }

  public void setRevenueShare(List<Float> revenueShare) {
    this.revenueShare = revenueShare;
  }


  public BasketRowMeta image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public BasketRowMeta realprice(Float realprice) {
    this.realprice = realprice;
    return this;
  }

   /**
   * Get realprice
   * @return realprice
  **/
  @javax.annotation.Nullable
  public Float getRealprice() {
    return realprice;
  }

  public void setRealprice(Float realprice) {
    this.realprice = realprice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasketRowMeta basketRowMeta = (BasketRowMeta) o;
    return Objects.equals(this.name, basketRowMeta.name) &&
        Objects.equals(this.rowprice, basketRowMeta.rowprice) &&
        Objects.equals(this.initialprice, basketRowMeta.initialprice) &&
        Objects.equals(this.isCumulative, basketRowMeta.isCumulative) &&
        Objects.equals(this.requiredPackages, basketRowMeta.requiredPackages) &&
        Objects.equals(this.requiresAny, basketRowMeta.requiresAny) &&
        Objects.equals(this.category, basketRowMeta.category) &&
        Objects.equals(this.producesGiftCard, basketRowMeta.producesGiftCard) &&
        Objects.equals(this.allowsGiftCards, basketRowMeta.allowsGiftCards) &&
        Objects.equals(this.servers, basketRowMeta.servers) &&
        Objects.equals(this.limits, basketRowMeta.limits) &&
        Objects.equals(this.hasDeliverables, basketRowMeta.hasDeliverables) &&
        Objects.equals(this.deliverableTypes, basketRowMeta.deliverableTypes) &&
        Objects.equals(this.downloadLink, basketRowMeta.downloadLink) &&
        Objects.equals(this.hasSellerProtection, basketRowMeta.hasSellerProtection) &&
        Objects.equals(this.itemType, basketRowMeta.itemType) &&
        Objects.equals(this.revenueShare, basketRowMeta.revenueShare) &&
        Objects.equals(this.image, basketRowMeta.image) &&
        Objects.equals(this.realprice, basketRowMeta.realprice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, rowprice, initialprice, isCumulative, requiredPackages, requiresAny, category, producesGiftCard, allowsGiftCards, servers, limits, hasDeliverables, deliverableTypes, downloadLink, hasSellerProtection, itemType, revenueShare, image, realprice);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasketRowMeta {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rowprice: ").append(toIndentedString(rowprice)).append("\n");
    sb.append("    initialprice: ").append(toIndentedString(initialprice)).append("\n");
    sb.append("    isCumulative: ").append(toIndentedString(isCumulative)).append("\n");
    sb.append("    requiredPackages: ").append(toIndentedString(requiredPackages)).append("\n");
    sb.append("    requiresAny: ").append(toIndentedString(requiresAny)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    producesGiftCard: ").append(toIndentedString(producesGiftCard)).append("\n");
    sb.append("    allowsGiftCards: ").append(toIndentedString(allowsGiftCards)).append("\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    hasDeliverables: ").append(toIndentedString(hasDeliverables)).append("\n");
    sb.append("    deliverableTypes: ").append(toIndentedString(deliverableTypes)).append("\n");
    sb.append("    downloadLink: ").append(toIndentedString(downloadLink)).append("\n");
    sb.append("    hasSellerProtection: ").append(toIndentedString(hasSellerProtection)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    revenueShare: ").append(toIndentedString(revenueShare)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    realprice: ").append(toIndentedString(realprice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("rowprice");
    openapiFields.add("initialprice");
    openapiFields.add("isCumulative");
    openapiFields.add("requiredPackages");
    openapiFields.add("requiresAny");
    openapiFields.add("category");
    openapiFields.add("producesGiftCard");
    openapiFields.add("allowsGiftCards");
    openapiFields.add("servers");
    openapiFields.add("limits");
    openapiFields.add("hasDeliverables");
    openapiFields.add("deliverableTypes");
    openapiFields.add("downloadLink");
    openapiFields.add("hasSellerProtection");
    openapiFields.add("itemType");
    openapiFields.add("revenue_share");
    openapiFields.add("image");
    openapiFields.add("realprice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BasketRowMeta
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasketRowMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasketRowMeta is not found in the empty JSON string", BasketRowMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasketRowMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasketRowMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requiredPackages") != null && !jsonObj.get("requiredPackages").isJsonNull() && !jsonObj.get("requiredPackages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredPackages` to be an array in the JSON string but got `%s`", jsonObj.get("requiredPackages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("servers") != null && !jsonObj.get("servers").isJsonNull() && !jsonObj.get("servers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `servers` to be an array in the JSON string but got `%s`", jsonObj.get("servers").toString()));
      }
      // validate the optional field `limits`
      if (jsonObj.get("limits") != null && !jsonObj.get("limits").isJsonNull()) {
        BasketRowMetaLimits.validateJsonElement(jsonObj.get("limits"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deliverableTypes") != null && !jsonObj.get("deliverableTypes").isJsonNull() && !jsonObj.get("deliverableTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliverableTypes` to be an array in the JSON string but got `%s`", jsonObj.get("deliverableTypes").toString()));
      }
      if ((jsonObj.get("downloadLink") != null && !jsonObj.get("downloadLink").isJsonNull()) && !jsonObj.get("downloadLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadLink").toString()));
      }
      if ((jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) && !jsonObj.get("itemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("revenue_share") != null && !jsonObj.get("revenue_share").isJsonNull() && !jsonObj.get("revenue_share").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenue_share` to be an array in the JSON string but got `%s`", jsonObj.get("revenue_share").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasketRowMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasketRowMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasketRowMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasketRowMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<BasketRowMeta>() {
           @Override
           public void write(JsonWriter out, BasketRowMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasketRowMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BasketRowMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BasketRowMeta
  * @throws IOException if the JSON string is invalid with respect to BasketRowMeta
  */
  public static BasketRowMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasketRowMeta.class);
  }

 /**
  * Convert an instance of BasketRowMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

