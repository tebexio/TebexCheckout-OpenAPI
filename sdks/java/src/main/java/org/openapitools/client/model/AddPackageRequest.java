/*
 * Tebex Checkout API
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModelPackage;
import org.openapitools.client.model.RevenueShare;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import TebexCheckout.JSON;

/**
 * AddPackageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-14T08:33:53.505068-05:00[America/Chicago]", comments = "Generator version: 7.5.0")
public class AddPackageRequest {
  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private ModelPackage _package;

  public static final String SERIALIZED_NAME_QTY = "qty";
  @SerializedName(SERIALIZED_NAME_QTY)
  private Integer qty;

  /**
   * The type of payment, either &#x60;single&#x60; for one-time payments or &#x60;subscription&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SINGLE("single"),
    
    SUBSCRIPTION("subscription");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_REVENUE_SHARE = "revenue_share";
  @SerializedName(SERIALIZED_NAME_REVENUE_SHARE)
  private List<RevenueShare> revenueShare = new ArrayList<>();

  public AddPackageRequest() {
  }

  public AddPackageRequest _package(ModelPackage _package) {
    this._package = _package;
    return this;
  }

   /**
   * Get _package
   * @return _package
  **/
  @javax.annotation.Nullable
  public ModelPackage getPackage() {
    return _package;
  }

  public void setPackage(ModelPackage _package) {
    this._package = _package;
  }


  public AddPackageRequest qty(Integer qty) {
    this.qty = qty;
    return this;
  }

   /**
   * The quantity of &#x60;package&#x60; in this basket. This is not the total quantity of overall items in the basket.
   * @return qty
  **/
  @javax.annotation.Nullable
  public Integer getQty() {
    return qty;
  }

  public void setQty(Integer qty) {
    this.qty = qty;
  }


  public AddPackageRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of payment, either &#x60;single&#x60; for one-time payments or &#x60;subscription&#x60;.
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AddPackageRequest revenueShare(List<RevenueShare> revenueShare) {
    this.revenueShare = revenueShare;
    return this;
  }

  public AddPackageRequest addRevenueShareItem(RevenueShare revenueShareItem) {
    if (this.revenueShare == null) {
      this.revenueShare = new ArrayList<>();
    }
    this.revenueShare.add(revenueShareItem);
    return this;
  }

   /**
   * An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**
   * @return revenueShare
  **/
  @javax.annotation.Nullable
  public List<RevenueShare> getRevenueShare() {
    return revenueShare;
  }

  public void setRevenueShare(List<RevenueShare> revenueShare) {
    this.revenueShare = revenueShare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddPackageRequest addPackageRequest = (AddPackageRequest) o;
    return Objects.equals(this._package, addPackageRequest._package) &&
        Objects.equals(this.qty, addPackageRequest.qty) &&
        Objects.equals(this.type, addPackageRequest.type) &&
        Objects.equals(this.revenueShare, addPackageRequest.revenueShare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_package, qty, type, revenueShare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddPackageRequest {\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    qty: ").append(toIndentedString(qty)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    revenueShare: ").append(toIndentedString(revenueShare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("package");
    openapiFields.add("qty");
    openapiFields.add("type");
    openapiFields.add("revenue_share");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddPackageRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddPackageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddPackageRequest is not found in the empty JSON string", AddPackageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddPackageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddPackageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `package`
      if (jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) {
        ModelPackage.validateJsonElement(jsonObj.get("package"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("revenue_share") != null && !jsonObj.get("revenue_share").isJsonNull()) {
        JsonArray jsonArrayrevenueShare = jsonObj.getAsJsonArray("revenue_share");
        if (jsonArrayrevenueShare != null) {
          // ensure the json data is an array
          if (!jsonObj.get("revenue_share").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `revenue_share` to be an array in the JSON string but got `%s`", jsonObj.get("revenue_share").toString()));
          }

          // validate the optional field `revenue_share` (array)
          for (int i = 0; i < jsonArrayrevenueShare.size(); i++) {
            RevenueShare.validateJsonElement(jsonArrayrevenueShare.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddPackageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddPackageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddPackageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddPackageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddPackageRequest>() {
           @Override
           public void write(JsonWriter out, AddPackageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddPackageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddPackageRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddPackageRequest
  * @throws IOException if the JSON string is invalid with respect to AddPackageRequest
  */
  public static AddPackageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddPackageRequest.class);
  }

 /**
  * Convert an instance of AddPackageRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

