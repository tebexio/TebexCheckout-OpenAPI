/*
 * Tebex Checkout API
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package TebexCheckout;

import TebexCheckout.ApiException;
import org.openapitools.client.model.RecurringPayment;
import org.openapitools.client.model.UpdateRecurringPaymentRequest;
import org.openapitools.client.model.UpdateSubscriptionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecurringPaymentsApi
 */
@Disabled
public class RecurringPaymentsApiTest {

    private final RecurringPaymentsApi api = new RecurringPaymentsApi();

    /**
     * Cancel a recurring payment
     *
     * This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelRecurringPaymentTest() throws ApiException {
        String reference = null;
        RecurringPayment response = api.cancelRecurringPayment(reference);
        // TODO: test validations
    }

    /**
     * Fetch a recurring payment (subscription) by its reference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecurringPaymentTest() throws ApiException {
        String reference = null;
        RecurringPayment response = api.getRecurringPayment(reference);
        // TODO: test validations
    }

    /**
     * Pause or reactivate a recurring payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecurringPaymentTest() throws ApiException {
        String reference = null;
        UpdateRecurringPaymentRequest updateRecurringPaymentRequest = null;
        RecurringPayment response = api.updateRecurringPayment(reference, updateRecurringPaymentRequest);
        // TODO: test validations
    }

    /**
     * Update a subscription with a new product / amount to pay - replacing the existing product
     *
     * If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        String reference = null;
        UpdateSubscriptionRequest updateSubscriptionRequest = null;
        RecurringPayment response = api.updateSubscription(reference, updateSubscriptionRequest);
        // TODO: test validations
    }

}
