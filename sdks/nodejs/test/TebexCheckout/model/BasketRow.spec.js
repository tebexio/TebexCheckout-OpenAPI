/**
 * Tebex Checkout API
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/TebexCheckout/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/TebexCheckout/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TebexCheckoutApi);
  }
}(this, function(expect, TebexCheckoutApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TebexCheckoutApi.BasketRow();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BasketRow', function() {
    it('should create an instance of BasketRow', function() {
      // uncomment below and update the code to test BasketRow
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be.a(TebexCheckoutApi.BasketRow);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property basket (base name: "basket")', function() {
      // uncomment below and update the code to test the property basket
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property _package (base name: "package")', function() {
      // uncomment below and update the code to test the property _package
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property override (base name: "override")', function() {
      // uncomment below and update the code to test the property override
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property server (base name: "server")', function() {
      // uncomment below and update the code to test the property server
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property giftUsernameId (base name: "gift_username_id")', function() {
      // uncomment below and update the code to test the property giftUsernameId
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property recurring (base name: "recurring")', function() {
      // uncomment below and update the code to test the property recurring
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property recurringPeriod (base name: "recurring_period")', function() {
      // uncomment below and update the code to test the property recurringPeriod
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property recurringNextPaymentDate (base name: "recurring_next_payment_date")', function() {
      // uncomment below and update the code to test the property recurringNextPaymentDate
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property meta (base name: "meta")', function() {
      // uncomment below and update the code to test the property meta
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property custom (base name: "custom")', function() {
      // uncomment below and update the code to test the property custom
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "image_url")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

    it('should have the property recurringPrice (base name: "recurring_price")', function() {
      // uncomment below and update the code to test the property recurringPrice
      //var instance = new TebexCheckoutApi.BasketRow();
      //expect(instance).to.be();
    });

  });

}));
