/**
 * Tebex Checkout API
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/TebexCheckout/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/TebexCheckout/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TebexCheckoutApi);
  }
}(this, function(expect, TebexCheckoutApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TebexCheckoutApi.PriceDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PriceDetails', function() {
    it('should create an instance of PriceDetails', function() {
      // uncomment below and update the code to test PriceDetails
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be.a(TebexCheckoutApi.PriceDetails);
    });

    it('should have the property fullPrice (base name: "fullPrice")', function() {
      // uncomment below and update the code to test the property fullPrice
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property subTotal (base name: "subTotal")', function() {
      // uncomment below and update the code to test the property subTotal
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property discounts (base name: "discounts")', function() {
      // uncomment below and update the code to test the property discounts
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property balance (base name: "balance")', function() {
      // uncomment below and update the code to test the property balance
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property sales (base name: "sales")', function() {
      // uncomment below and update the code to test the property sales
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property giftcards (base name: "giftcards")', function() {
      // uncomment below and update the code to test the property giftcards
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property recurring (base name: "recurring")', function() {
      // uncomment below and update the code to test the property recurring
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property recurringPeriod (base name: "recurringPeriod")', function() {
      // uncomment below and update the code to test the property recurringPeriod
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property recurringNextPaymentDate (base name: "recurringNextPaymentDate")', function() {
      // uncomment below and update the code to test the property recurringNextPaymentDate
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

    it('should have the property roundUp (base name: "roundUp")', function() {
      // uncomment below and update the code to test the property roundUp
      //var instance = new TebexCheckoutApi.PriceDetails();
      //expect(instance).to.be();
    });

  });

}));
