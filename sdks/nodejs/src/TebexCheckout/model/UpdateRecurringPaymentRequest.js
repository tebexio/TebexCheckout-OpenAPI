/**
 * Tebex Checkout API
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateRecurringPaymentRequest model module.
 * @module TebexCheckout/model/UpdateRecurringPaymentRequest
 * @version 1.1.0
 */
class UpdateRecurringPaymentRequest {
    /**
     * Constructs a new <code>UpdateRecurringPaymentRequest</code>.
     * @alias module:TebexCheckout/model/UpdateRecurringPaymentRequest
     * @param status {module:TebexCheckout/model/UpdateRecurringPaymentRequest.StatusEnum} Your desired state of the recurring payment. Provide `Paused` with `paused_until` to pause a recurring payment. Otherwise, provide `Active` to resume a recurring payment.
     */
    constructor(status) { 
        
        UpdateRecurringPaymentRequest.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>UpdateRecurringPaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:TebexCheckout/model/UpdateRecurringPaymentRequest} obj Optional instance to populate.
     * @return {module:TebexCheckout/model/UpdateRecurringPaymentRequest} The populated <code>UpdateRecurringPaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateRecurringPaymentRequest();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('paused_until')) {
                obj['paused_until'] = ApiClient.convertToType(data['paused_until'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateRecurringPaymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateRecurringPaymentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateRecurringPaymentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['paused_until'] && !(typeof data['paused_until'] === 'string' || data['paused_until'] instanceof String)) {
            throw new Error("Expected the field `paused_until` to be a primitive type in the JSON string but got " + data['paused_until']);
        }

        return true;
    }


}

UpdateRecurringPaymentRequest.RequiredProperties = ["status"];

/**
 * Your desired state of the recurring payment. Provide `Paused` with `paused_until` to pause a recurring payment. Otherwise, provide `Active` to resume a recurring payment.
 * @member {module:TebexCheckout/model/UpdateRecurringPaymentRequest.StatusEnum} status
 */
UpdateRecurringPaymentRequest.prototype['status'] = undefined;

/**
 * To pause a payment, provide a ISO8601 formatted date on which the payment should be reactivated.
 * @member {String} paused_until
 */
UpdateRecurringPaymentRequest.prototype['paused_until'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UpdateRecurringPaymentRequest['StatusEnum'] = {

    /**
     * value: "Paused"
     * @const
     */
    "Paused": "Paused",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active"
};



export default UpdateRecurringPaymentRequest;

