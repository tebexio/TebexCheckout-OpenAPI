/**
 * Tebex Checkout API
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RecurringPayment from '../model/RecurringPayment';
import UpdateRecurringPaymentRequest from '../model/UpdateRecurringPaymentRequest';
import UpdateSubscriptionRequest from '../model/UpdateSubscriptionRequest';

/**
* RecurringPayments service.
* @module TebexCheckout/TebexCheckout/RecurringPaymentsApi
* @version 1.1.2
*/
export default class RecurringPaymentsApi {

    /**
    * Constructs a new RecurringPaymentsApi. 
    * @alias module:TebexCheckout/TebexCheckout/RecurringPaymentsApi
    * @class
    * @param {module:TebexCheckout/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:TebexCheckout/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRecurringPayment operation.
     * @callback module:TebexCheckout/TebexCheckout/RecurringPaymentsApi~cancelRecurringPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexCheckout/model/RecurringPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a recurring payment
     * This cancels the recurring payment for the reference provided. Recurring payment references start with `tbx-r-`
     * @param {String} reference The recurring payment reference to cancel.
     * @param {module:TebexCheckout/TebexCheckout/RecurringPaymentsApi~cancelRecurringPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexCheckout/model/RecurringPayment}
     */
    cancelRecurringPayment(reference, callback) {
      let postBody = null;
      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling cancelRecurringPayment");
      }

      let pathParams = {
        'reference': reference
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tebex_checkout_auth_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecurringPayment;
      return this.apiClient.callApi(
        '/recurring-payments/{reference}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurringPayment operation.
     * @callback module:TebexCheckout/TebexCheckout/RecurringPaymentsApi~getRecurringPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexCheckout/model/RecurringPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a recurring payment (subscription) by its reference
     * @param {String} reference The recurring payment reference to fetch.
     * @param {module:TebexCheckout/TebexCheckout/RecurringPaymentsApi~getRecurringPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexCheckout/model/RecurringPayment}
     */
    getRecurringPayment(reference, callback) {
      let postBody = null;
      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling getRecurringPayment");
      }

      let pathParams = {
        'reference': reference
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tebex_checkout_auth_basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecurringPayment;
      return this.apiClient.callApi(
        '/recurring-payments/{reference}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRecurringPayment operation.
     * @callback module:TebexCheckout/TebexCheckout/RecurringPaymentsApi~updateRecurringPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexCheckout/model/RecurringPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause or reactivate a recurring payment
     * @param {String} reference The recurring payment reference to update.
     * @param {Object} opts Optional parameters
     * @param {module:TebexCheckout/model/UpdateRecurringPaymentRequest} [updateRecurringPaymentRequest] 
     * @param {module:TebexCheckout/TebexCheckout/RecurringPaymentsApi~updateRecurringPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexCheckout/model/RecurringPayment}
     */
    updateRecurringPayment(reference, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateRecurringPaymentRequest'];
      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling updateRecurringPayment");
      }

      let pathParams = {
        'reference': reference
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tebex_checkout_auth_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecurringPayment;
      return this.apiClient.callApi(
        '/recurring-payments/{reference}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscription operation.
     * @callback module:TebexCheckout/TebexCheckout/RecurringPaymentsApi~updateSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexCheckout/model/RecurringPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a subscription with a new product / amount to pay - replacing the existing product
     * If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
     * @param {String} reference The recurring payment reference to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:TebexCheckout/model/UpdateSubscriptionRequest} [updateSubscriptionRequest] 
     * @param {module:TebexCheckout/TebexCheckout/RecurringPaymentsApi~updateSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexCheckout/model/RecurringPayment}
     */
    updateSubscription(reference, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateSubscriptionRequest'];
      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling updateSubscription");
      }

      let pathParams = {
        'reference': reference
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tebex_checkout_auth_basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecurringPayment;
      return this.apiClient.callApi(
        '/recurring-payments/{reference}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
