/*
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TebexCheckout.Client;
using TebexCheckout.Model;

namespace TebexCheckout.TebexCheckout
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurringPaymentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a recurring payment
        /// </summary>
        /// <remarks>
        /// This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurringPayment</returns>
        RecurringPayment CancelRecurringPayment(string reference, int operationIndex = 0);

        /// <summary>
        /// Cancel a recurring payment
        /// </summary>
        /// <remarks>
        /// This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurringPayment</returns>
        ApiResponse<RecurringPayment> CancelRecurringPaymentWithHttpInfo(string reference, int operationIndex = 0);
        /// <summary>
        /// Fetch a recurring payment (subscription) by its reference
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurringPayment</returns>
        RecurringPayment GetRecurringPayment(string reference, int operationIndex = 0);

        /// <summary>
        /// Fetch a recurring payment (subscription) by its reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurringPayment</returns>
        ApiResponse<RecurringPayment> GetRecurringPaymentWithHttpInfo(string reference, int operationIndex = 0);
        /// <summary>
        /// Pause or reactivate a recurring payment
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to update.</param>
        /// <param name="updateRecurringPaymentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurringPayment</returns>
        RecurringPayment UpdateRecurringPayment(string reference, UpdateRecurringPaymentRequest? updateRecurringPaymentRequest = default(UpdateRecurringPaymentRequest?), int operationIndex = 0);

        /// <summary>
        /// Pause or reactivate a recurring payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to update.</param>
        /// <param name="updateRecurringPaymentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurringPayment</returns>
        ApiResponse<RecurringPayment> UpdateRecurringPaymentWithHttpInfo(string reference, UpdateRecurringPaymentRequest? updateRecurringPaymentRequest = default(UpdateRecurringPaymentRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a subscription with a new product / amount to pay - replacing the existing product
        /// </summary>
        /// <remarks>
        /// If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="updateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurringPayment</returns>
        RecurringPayment UpdateSubscription(string reference, UpdateSubscriptionRequest? updateSubscriptionRequest = default(UpdateSubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a subscription with a new product / amount to pay - replacing the existing product
        /// </summary>
        /// <remarks>
        /// If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="updateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurringPayment</returns>
        ApiResponse<RecurringPayment> UpdateSubscriptionWithHttpInfo(string reference, UpdateSubscriptionRequest? updateSubscriptionRequest = default(UpdateSubscriptionRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurringPaymentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a recurring payment
        /// </summary>
        /// <remarks>
        /// This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringPayment</returns>
        System.Threading.Tasks.Task<RecurringPayment> CancelRecurringPaymentAsync(string reference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a recurring payment
        /// </summary>
        /// <remarks>
        /// This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringPayment)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringPayment>> CancelRecurringPaymentWithHttpInfoAsync(string reference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a recurring payment (subscription) by its reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringPayment</returns>
        System.Threading.Tasks.Task<RecurringPayment> GetRecurringPaymentAsync(string reference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a recurring payment (subscription) by its reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringPayment)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringPayment>> GetRecurringPaymentWithHttpInfoAsync(string reference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pause or reactivate a recurring payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to update.</param>
        /// <param name="updateRecurringPaymentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringPayment</returns>
        System.Threading.Tasks.Task<RecurringPayment> UpdateRecurringPaymentAsync(string reference, UpdateRecurringPaymentRequest? updateRecurringPaymentRequest = default(UpdateRecurringPaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pause or reactivate a recurring payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to update.</param>
        /// <param name="updateRecurringPaymentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringPayment)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringPayment>> UpdateRecurringPaymentWithHttpInfoAsync(string reference, UpdateRecurringPaymentRequest? updateRecurringPaymentRequest = default(UpdateRecurringPaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a subscription with a new product / amount to pay - replacing the existing product
        /// </summary>
        /// <remarks>
        /// If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="updateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringPayment</returns>
        System.Threading.Tasks.Task<RecurringPayment> UpdateSubscriptionAsync(string reference, UpdateSubscriptionRequest? updateSubscriptionRequest = default(UpdateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a subscription with a new product / amount to pay - replacing the existing product
        /// </summary>
        /// <remarks>
        /// If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="updateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringPayment)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurringPayment>> UpdateSubscriptionWithHttpInfoAsync(string reference, UpdateSubscriptionRequest? updateSubscriptionRequest = default(UpdateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurringPaymentsApi : IRecurringPaymentsApiSync, IRecurringPaymentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecurringPaymentsApi : IRecurringPaymentsApi
    {
        private TebexCheckout.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurringPaymentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurringPaymentsApi(string basePath)
        {
            this.Configuration = TebexCheckout.Client.Configuration.MergeConfigurations(
                TebexCheckout.Client.GlobalConfiguration.Instance,
                new TebexCheckout.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringPaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecurringPaymentsApi(TebexCheckout.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TebexCheckout.Client.Configuration.MergeConfigurations(
                TebexCheckout.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringPaymentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecurringPaymentsApi(TebexCheckout.Client.ISynchronousClient client, TebexCheckout.Client.IAsynchronousClient asyncClient, TebexCheckout.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TebexCheckout.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TebexCheckout.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TebexCheckout.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TebexCheckout.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel a recurring payment This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurringPayment</returns>
        public RecurringPayment CancelRecurringPayment(string reference, int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<RecurringPayment> localVarResponse = CancelRecurringPaymentWithHttpInfo(reference);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a recurring payment This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurringPayment</returns>
        public TebexCheckout.Client.ApiResponse<RecurringPayment> CancelRecurringPaymentWithHttpInfo(string reference, int operationIndex = 0)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'reference' when calling RecurringPaymentsApi->CancelRecurringPayment");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", TebexCheckout.Client.ClientUtils.ParameterToString(reference)); // path parameter

            localVarRequestOptions.Operation = "RecurringPaymentsApi.CancelRecurringPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RecurringPayment>("/recurring-payments/{reference}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelRecurringPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a recurring payment This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringPayment</returns>
        public async System.Threading.Tasks.Task<RecurringPayment> CancelRecurringPaymentAsync(string reference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<RecurringPayment> localVarResponse = await CancelRecurringPaymentWithHttpInfoAsync(reference, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a recurring payment This cancels the recurring payment for the reference provided. Recurring payment references start with &#x60;tbx-r-&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to cancel.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringPayment)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<RecurringPayment>> CancelRecurringPaymentWithHttpInfoAsync(string reference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'reference' when calling RecurringPaymentsApi->CancelRecurringPayment");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", TebexCheckout.Client.ClientUtils.ParameterToString(reference)); // path parameter

            localVarRequestOptions.Operation = "RecurringPaymentsApi.CancelRecurringPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RecurringPayment>("/recurring-payments/{reference}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelRecurringPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a recurring payment (subscription) by its reference 
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurringPayment</returns>
        public RecurringPayment GetRecurringPayment(string reference, int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<RecurringPayment> localVarResponse = GetRecurringPaymentWithHttpInfo(reference);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a recurring payment (subscription) by its reference 
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurringPayment</returns>
        public TebexCheckout.Client.ApiResponse<RecurringPayment> GetRecurringPaymentWithHttpInfo(string reference, int operationIndex = 0)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'reference' when calling RecurringPaymentsApi->GetRecurringPayment");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", TebexCheckout.Client.ClientUtils.ParameterToString(reference)); // path parameter

            localVarRequestOptions.Operation = "RecurringPaymentsApi.GetRecurringPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RecurringPayment>("/recurring-payments/{reference}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a recurring payment (subscription) by its reference 
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringPayment</returns>
        public async System.Threading.Tasks.Task<RecurringPayment> GetRecurringPaymentAsync(string reference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<RecurringPayment> localVarResponse = await GetRecurringPaymentWithHttpInfoAsync(reference, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a recurring payment (subscription) by its reference 
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringPayment)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<RecurringPayment>> GetRecurringPaymentWithHttpInfoAsync(string reference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'reference' when calling RecurringPaymentsApi->GetRecurringPayment");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", TebexCheckout.Client.ClientUtils.ParameterToString(reference)); // path parameter

            localVarRequestOptions.Operation = "RecurringPaymentsApi.GetRecurringPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecurringPayment>("/recurring-payments/{reference}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecurringPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause or reactivate a recurring payment 
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to update.</param>
        /// <param name="updateRecurringPaymentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurringPayment</returns>
        public RecurringPayment UpdateRecurringPayment(string reference, UpdateRecurringPaymentRequest? updateRecurringPaymentRequest = default(UpdateRecurringPaymentRequest?), int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<RecurringPayment> localVarResponse = UpdateRecurringPaymentWithHttpInfo(reference, updateRecurringPaymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause or reactivate a recurring payment 
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to update.</param>
        /// <param name="updateRecurringPaymentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurringPayment</returns>
        public TebexCheckout.Client.ApiResponse<RecurringPayment> UpdateRecurringPaymentWithHttpInfo(string reference, UpdateRecurringPaymentRequest? updateRecurringPaymentRequest = default(UpdateRecurringPaymentRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'reference' when calling RecurringPaymentsApi->UpdateRecurringPayment");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", TebexCheckout.Client.ClientUtils.ParameterToString(reference)); // path parameter
            localVarRequestOptions.Data = updateRecurringPaymentRequest;

            localVarRequestOptions.Operation = "RecurringPaymentsApi.UpdateRecurringPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RecurringPayment>("/recurring-payments/{reference}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecurringPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause or reactivate a recurring payment 
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to update.</param>
        /// <param name="updateRecurringPaymentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringPayment</returns>
        public async System.Threading.Tasks.Task<RecurringPayment> UpdateRecurringPaymentAsync(string reference, UpdateRecurringPaymentRequest? updateRecurringPaymentRequest = default(UpdateRecurringPaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<RecurringPayment> localVarResponse = await UpdateRecurringPaymentWithHttpInfoAsync(reference, updateRecurringPaymentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause or reactivate a recurring payment 
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to update.</param>
        /// <param name="updateRecurringPaymentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringPayment)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<RecurringPayment>> UpdateRecurringPaymentWithHttpInfoAsync(string reference, UpdateRecurringPaymentRequest? updateRecurringPaymentRequest = default(UpdateRecurringPaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'reference' when calling RecurringPaymentsApi->UpdateRecurringPayment");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", TebexCheckout.Client.ClientUtils.ParameterToString(reference)); // path parameter
            localVarRequestOptions.Data = updateRecurringPaymentRequest;

            localVarRequestOptions.Operation = "RecurringPaymentsApi.UpdateRecurringPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RecurringPayment>("/recurring-payments/{reference}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecurringPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a subscription with a new product / amount to pay - replacing the existing product If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="updateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurringPayment</returns>
        public RecurringPayment UpdateSubscription(string reference, UpdateSubscriptionRequest? updateSubscriptionRequest = default(UpdateSubscriptionRequest?), int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<RecurringPayment> localVarResponse = UpdateSubscriptionWithHttpInfo(reference, updateSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a subscription with a new product / amount to pay - replacing the existing product If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="updateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurringPayment</returns>
        public TebexCheckout.Client.ApiResponse<RecurringPayment> UpdateSubscriptionWithHttpInfo(string reference, UpdateSubscriptionRequest? updateSubscriptionRequest = default(UpdateSubscriptionRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'reference' when calling RecurringPaymentsApi->UpdateSubscription");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", TebexCheckout.Client.ClientUtils.ParameterToString(reference)); // path parameter
            localVarRequestOptions.Data = updateSubscriptionRequest;

            localVarRequestOptions.Operation = "RecurringPaymentsApi.UpdateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RecurringPayment>("/recurring-payments/{reference}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a subscription with a new product / amount to pay - replacing the existing product If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="updateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurringPayment</returns>
        public async System.Threading.Tasks.Task<RecurringPayment> UpdateSubscriptionAsync(string reference, UpdateSubscriptionRequest? updateSubscriptionRequest = default(UpdateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<RecurringPayment> localVarResponse = await UpdateSubscriptionWithHttpInfoAsync(reference, updateSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a subscription with a new product / amount to pay - replacing the existing product If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date.   **This endpoint requires prior approval - please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reference">The recurring payment reference to fetch.</param>
        /// <param name="updateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurringPayment)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<RecurringPayment>> UpdateSubscriptionWithHttpInfoAsync(string reference, UpdateSubscriptionRequest? updateSubscriptionRequest = default(UpdateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reference' is set
            if (reference == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'reference' when calling RecurringPaymentsApi->UpdateSubscription");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reference", TebexCheckout.Client.ClientUtils.ParameterToString(reference)); // path parameter
            localVarRequestOptions.Data = updateSubscriptionRequest;

            localVarRequestOptions.Operation = "RecurringPaymentsApi.UpdateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RecurringPayment>("/recurring-payments/{reference}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
