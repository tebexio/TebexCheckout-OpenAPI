/*
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TebexCheckout.Client;
using TebexCheckout.Model;

namespace TebexCheckout.TebexCheckout
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch a payment by its transaction ID
        /// </summary>
        /// <remarks>
        /// This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payment</returns>
        Payment GetPaymentById(string txnId, int operationIndex = 0);

        /// <summary>
        /// Fetch a payment by its transaction ID
        /// </summary>
        /// <remarks>
        /// This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GetPaymentByIdWithHttpInfo(string txnId, int operationIndex = 0);
        /// <summary>
        /// Refund a payment by its transaction ID
        /// </summary>
        /// <remarks>
        /// This will refund the given payment associated with this transaction id.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to refund.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payment</returns>
        Payment RefundPaymentById(string txnId, int operationIndex = 0);

        /// <summary>
        /// Refund a payment by its transaction ID
        /// </summary>
        /// <remarks>
        /// This will refund the given payment associated with this transaction id.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to refund.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> RefundPaymentByIdWithHttpInfo(string txnId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetch a payment by its transaction ID
        /// </summary>
        /// <remarks>
        /// This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GetPaymentByIdAsync(string txnId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a payment by its transaction ID
        /// </summary>
        /// <remarks>
        /// This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentByIdWithHttpInfoAsync(string txnId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refund a payment by its transaction ID
        /// </summary>
        /// <remarks>
        /// This will refund the given payment associated with this transaction id.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to refund.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> RefundPaymentByIdAsync(string txnId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refund a payment by its transaction ID
        /// </summary>
        /// <remarks>
        /// This will refund the given payment associated with this transaction id.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to refund.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> RefundPaymentByIdWithHttpInfoAsync(string txnId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IPaymentsApiSync, IPaymentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private TebexCheckout.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(string basePath)
        {
            this.Configuration = TebexCheckout.Client.Configuration.MergeConfigurations(
                TebexCheckout.Client.GlobalConfiguration.Instance,
                new TebexCheckout.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(TebexCheckout.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TebexCheckout.Client.Configuration.MergeConfigurations(
                TebexCheckout.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentsApi(TebexCheckout.Client.ISynchronousClient client, TebexCheckout.Client.IAsynchronousClient asyncClient, TebexCheckout.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TebexCheckout.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TebexCheckout.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TebexCheckout.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TebexCheckout.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetch a payment by its transaction ID This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payment</returns>
        public Payment GetPaymentById(string txnId, int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<Payment> localVarResponse = GetPaymentByIdWithHttpInfo(txnId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a payment by its transaction ID This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payment</returns>
        public TebexCheckout.Client.ApiResponse<Payment> GetPaymentByIdWithHttpInfo(string txnId, int operationIndex = 0)
        {
            // verify the required parameter 'txnId' is set
            if (txnId == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'txnId' when calling PaymentsApi->GetPaymentById");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("txnId", TebexCheckout.Client.ClientUtils.ParameterToString(txnId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetPaymentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Payment>("/payments/{txnId}?type=txn_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a payment by its transaction ID This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GetPaymentByIdAsync(string txnId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<Payment> localVarResponse = await GetPaymentByIdWithHttpInfoAsync(txnId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a payment by its transaction ID This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with &#x60;tbx-&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<Payment>> GetPaymentByIdWithHttpInfoAsync(string txnId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'txnId' is set
            if (txnId == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'txnId' when calling PaymentsApi->GetPaymentById");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("txnId", TebexCheckout.Client.ClientUtils.ParameterToString(txnId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.GetPaymentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Payment>("/payments/{txnId}?type=txn_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refund a payment by its transaction ID This will refund the given payment associated with this transaction id.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to refund.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payment</returns>
        public Payment RefundPaymentById(string txnId, int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<Payment> localVarResponse = RefundPaymentByIdWithHttpInfo(txnId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refund a payment by its transaction ID This will refund the given payment associated with this transaction id.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to refund.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payment</returns>
        public TebexCheckout.Client.ApiResponse<Payment> RefundPaymentByIdWithHttpInfo(string txnId, int operationIndex = 0)
        {
            // verify the required parameter 'txnId' is set
            if (txnId == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'txnId' when calling PaymentsApi->RefundPaymentById");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("txnId", TebexCheckout.Client.ClientUtils.ParameterToString(txnId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.RefundPaymentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Payment>("/payments/{txnId}/refund?type=txn_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefundPaymentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refund a payment by its transaction ID This will refund the given payment associated with this transaction id.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to refund.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> RefundPaymentByIdAsync(string txnId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<Payment> localVarResponse = await RefundPaymentByIdWithHttpInfoAsync(txnId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refund a payment by its transaction ID This will refund the given payment associated with this transaction id.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txnId">The payment reference to refund.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<Payment>> RefundPaymentByIdWithHttpInfoAsync(string txnId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'txnId' is set
            if (txnId == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'txnId' when calling PaymentsApi->RefundPaymentById");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("txnId", TebexCheckout.Client.ClientUtils.ParameterToString(txnId)); // path parameter

            localVarRequestOptions.Operation = "PaymentsApi.RefundPaymentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Payment>("/payments/{txnId}/refund?type=txn_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefundPaymentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
