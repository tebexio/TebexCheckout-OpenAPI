/*
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TebexCheckout.Client;
using TebexCheckout.Model;

namespace TebexCheckout.TebexCheckout
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICheckoutApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a checkout request
        /// </summary>
        /// <remarks>
        /// This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkoutRequest">Provide a &#x60;Basket&#x60;, an array of &#x60;Packages&#x60; to be added to the basket, and an optional &#x60;Sale&#x60; to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.** (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket Checkout(CheckoutRequest? checkoutRequest = default(CheckoutRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a checkout request
        /// </summary>
        /// <remarks>
        /// This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkoutRequest">Provide a &#x60;Basket&#x60;, an array of &#x60;Packages&#x60; to be added to the basket, and an optional &#x60;Sale&#x60; to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.** (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> CheckoutWithHttpInfo(CheckoutRequest? checkoutRequest = default(CheckoutRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICheckoutApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a checkout request
        /// </summary>
        /// <remarks>
        /// This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkoutRequest">Provide a &#x60;Basket&#x60;, an array of &#x60;Packages&#x60; to be added to the basket, and an optional &#x60;Sale&#x60; to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.** (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> CheckoutAsync(CheckoutRequest? checkoutRequest = default(CheckoutRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a checkout request
        /// </summary>
        /// <remarks>
        /// This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkoutRequest">Provide a &#x60;Basket&#x60;, an array of &#x60;Packages&#x60; to be added to the basket, and an optional &#x60;Sale&#x60; to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.** (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> CheckoutWithHttpInfoAsync(CheckoutRequest? checkoutRequest = default(CheckoutRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICheckoutApi : ICheckoutApiSync, ICheckoutApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CheckoutApi : ICheckoutApi
    {
        private TebexCheckout.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CheckoutApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CheckoutApi(string basePath)
        {
            this.Configuration = TebexCheckout.Client.Configuration.MergeConfigurations(
                TebexCheckout.Client.GlobalConfiguration.Instance,
                new TebexCheckout.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CheckoutApi(TebexCheckout.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TebexCheckout.Client.Configuration.MergeConfigurations(
                TebexCheckout.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CheckoutApi(TebexCheckout.Client.ISynchronousClient client, TebexCheckout.Client.IAsynchronousClient asyncClient, TebexCheckout.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TebexCheckout.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TebexCheckout.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TebexCheckout.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TebexCheckout.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a checkout request This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkoutRequest">Provide a &#x60;Basket&#x60;, an array of &#x60;Packages&#x60; to be added to the basket, and an optional &#x60;Sale&#x60; to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.** (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket Checkout(CheckoutRequest? checkoutRequest = default(CheckoutRequest?), int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = CheckoutWithHttpInfo(checkoutRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a checkout request This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkoutRequest">Provide a &#x60;Basket&#x60;, an array of &#x60;Packages&#x60; to be added to the basket, and an optional &#x60;Sale&#x60; to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.** (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public TebexCheckout.Client.ApiResponse<Basket> CheckoutWithHttpInfo(CheckoutRequest? checkoutRequest = default(CheckoutRequest?), int operationIndex = 0)
        {
            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = checkoutRequest;

            localVarRequestOptions.Operation = "CheckoutApi.Checkout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Basket>("/checkout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Checkout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a checkout request This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkoutRequest">Provide a &#x60;Basket&#x60;, an array of &#x60;Packages&#x60; to be added to the basket, and an optional &#x60;Sale&#x60; to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.** (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> CheckoutAsync(CheckoutRequest? checkoutRequest = default(CheckoutRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = await CheckoutWithHttpInfoAsync(checkoutRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a checkout request This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkoutRequest">Provide a &#x60;Basket&#x60;, an array of &#x60;Packages&#x60; to be added to the basket, and an optional &#x60;Sale&#x60; to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.** (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<Basket>> CheckoutWithHttpInfoAsync(CheckoutRequest? checkoutRequest = default(CheckoutRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = checkoutRequest;

            localVarRequestOptions.Operation = "CheckoutApi.Checkout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Basket>("/checkout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Checkout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
