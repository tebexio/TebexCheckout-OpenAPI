/*
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TebexCheckout.Client;
using TebexCheckout.Model;

namespace TebexCheckout.TebexCheckout
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasketsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a package to the basket
        /// </summary>
        /// <remarks>
        /// This adds a package (an object describing the product) to the basket &#x60;{ident}&#x60;. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="addPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket AddPackage(string ident, AddPackageRequest? addPackageRequest = default(AddPackageRequest?), int operationIndex = 0);

        /// <summary>
        /// Add a package to the basket
        /// </summary>
        /// <remarks>
        /// This adds a package (an object describing the product) to the basket &#x60;{ident}&#x60;. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="addPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> AddPackageWithHttpInfo(string ident, AddPackageRequest? addPackageRequest = default(AddPackageRequest?), int operationIndex = 0);
        /// <summary>
        /// Add a sale to the basket
        /// </summary>
        /// <remarks>
        /// Adds a &#x60;Sale&#x60; to the basket with &#x60;{ident}&#x60;. **Sales cannot be applied to baskets with &#x60;revenue_share&#x60; set.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="sale">Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket AddSaleToBasket(string ident, Sale? sale = default(Sale?), int operationIndex = 0);

        /// <summary>
        /// Add a sale to the basket
        /// </summary>
        /// <remarks>
        /// Adds a &#x60;Sale&#x60; to the basket with &#x60;{ident}&#x60;. **Sales cannot be applied to baskets with &#x60;revenue_share&#x60; set.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="sale">Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> AddSaleToBasketWithHttpInfo(string ident, Sale? sale = default(Sale?), int operationIndex = 0);
        /// <summary>
        /// Create a basket that can be used to pay for items
        /// </summary>
        /// <remarks>
        /// This will create and return a &#x60;Basket&#x60; that can be paid for by redirecting the user to &#x60;links.checkout&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBasketRequest">Create a basket, returning the full basket object and payment link. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket CreateBasket(CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a basket that can be used to pay for items
        /// </summary>
        /// <remarks>
        /// This will create and return a &#x60;Basket&#x60; that can be paid for by redirecting the user to &#x60;links.checkout&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBasketRequest">Create a basket, returning the full basket object and payment link. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> CreateBasketWithHttpInfo(CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0);
        /// <summary>
        /// Fetch a basket by its identifier
        /// </summary>
        /// <remarks>
        /// Gets the basket associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket GetBasketById(string ident, int operationIndex = 0);

        /// <summary>
        /// Fetch a basket by its identifier
        /// </summary>
        /// <remarks>
        /// Gets the basket associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> GetBasketByIdWithHttpInfo(string ident, int operationIndex = 0);
        /// <summary>
        /// Remove a row from the basket
        /// </summary>
        /// <remarks>
        /// This will remove the given &#x60;{rows.id}&#x60; from the basket &#x60;{ident}&#x60;. The basket must be re-fetched after running to receive updated totals.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="rowsId">The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveRowFromBasket(string ident, int rowsId, int operationIndex = 0);

        /// <summary>
        /// Remove a row from the basket
        /// </summary>
        /// <remarks>
        /// This will remove the given &#x60;{rows.id}&#x60; from the basket &#x60;{ident}&#x60;. The basket must be re-fetched after running to receive updated totals.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="rowsId">The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveRowFromBasketWithHttpInfo(string ident, int rowsId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasketsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a package to the basket
        /// </summary>
        /// <remarks>
        /// This adds a package (an object describing the product) to the basket &#x60;{ident}&#x60;. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="addPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> AddPackageAsync(string ident, AddPackageRequest? addPackageRequest = default(AddPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a package to the basket
        /// </summary>
        /// <remarks>
        /// This adds a package (an object describing the product) to the basket &#x60;{ident}&#x60;. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="addPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> AddPackageWithHttpInfoAsync(string ident, AddPackageRequest? addPackageRequest = default(AddPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a sale to the basket
        /// </summary>
        /// <remarks>
        /// Adds a &#x60;Sale&#x60; to the basket with &#x60;{ident}&#x60;. **Sales cannot be applied to baskets with &#x60;revenue_share&#x60; set.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="sale">Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> AddSaleToBasketAsync(string ident, Sale? sale = default(Sale?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a sale to the basket
        /// </summary>
        /// <remarks>
        /// Adds a &#x60;Sale&#x60; to the basket with &#x60;{ident}&#x60;. **Sales cannot be applied to baskets with &#x60;revenue_share&#x60; set.**
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="sale">Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> AddSaleToBasketWithHttpInfoAsync(string ident, Sale? sale = default(Sale?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a basket that can be used to pay for items
        /// </summary>
        /// <remarks>
        /// This will create and return a &#x60;Basket&#x60; that can be paid for by redirecting the user to &#x60;links.checkout&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBasketRequest">Create a basket, returning the full basket object and payment link. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> CreateBasketAsync(CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a basket that can be used to pay for items
        /// </summary>
        /// <remarks>
        /// This will create and return a &#x60;Basket&#x60; that can be paid for by redirecting the user to &#x60;links.checkout&#x60;
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBasketRequest">Create a basket, returning the full basket object and payment link. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> CreateBasketWithHttpInfoAsync(CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a basket by its identifier
        /// </summary>
        /// <remarks>
        /// Gets the basket associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> GetBasketByIdAsync(string ident, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a basket by its identifier
        /// </summary>
        /// <remarks>
        /// Gets the basket associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> GetBasketByIdWithHttpInfoAsync(string ident, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a row from the basket
        /// </summary>
        /// <remarks>
        /// This will remove the given &#x60;{rows.id}&#x60; from the basket &#x60;{ident}&#x60;. The basket must be re-fetched after running to receive updated totals.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="rowsId">The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveRowFromBasketAsync(string ident, int rowsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a row from the basket
        /// </summary>
        /// <remarks>
        /// This will remove the given &#x60;{rows.id}&#x60; from the basket &#x60;{ident}&#x60;. The basket must be re-fetched after running to receive updated totals.
        /// </remarks>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="rowsId">The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRowFromBasketWithHttpInfoAsync(string ident, int rowsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasketsApi : IBasketsApiSync, IBasketsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasketsApi : IBasketsApi
    {
        private TebexCheckout.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BasketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasketsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasketsApi(string basePath)
        {
            this.Configuration = TebexCheckout.Client.Configuration.MergeConfigurations(
                TebexCheckout.Client.GlobalConfiguration.Instance,
                new TebexCheckout.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasketsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasketsApi(TebexCheckout.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TebexCheckout.Client.Configuration.MergeConfigurations(
                TebexCheckout.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexCheckout.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasketsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BasketsApi(TebexCheckout.Client.ISynchronousClient client, TebexCheckout.Client.IAsynchronousClient asyncClient, TebexCheckout.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TebexCheckout.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TebexCheckout.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TebexCheckout.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TebexCheckout.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TebexCheckout.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a package to the basket This adds a package (an object describing the product) to the basket &#x60;{ident}&#x60;. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="addPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket AddPackage(string ident, AddPackageRequest? addPackageRequest = default(AddPackageRequest?), int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = AddPackageWithHttpInfo(ident, addPackageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a package to the basket This adds a package (an object describing the product) to the basket &#x60;{ident}&#x60;. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="addPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public TebexCheckout.Client.ApiResponse<Basket> AddPackageWithHttpInfo(string ident, AddPackageRequest? addPackageRequest = default(AddPackageRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'ident' is set
            if (ident == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'ident' when calling BasketsApi->AddPackage");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ident", TebexCheckout.Client.ClientUtils.ParameterToString(ident)); // path parameter
            localVarRequestOptions.Data = addPackageRequest;

            localVarRequestOptions.Operation = "BasketsApi.AddPackage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Basket>("/baskets/{ident}/packages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a package to the basket This adds a package (an object describing the product) to the basket &#x60;{ident}&#x60;. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="addPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> AddPackageAsync(string ident, AddPackageRequest? addPackageRequest = default(AddPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = await AddPackageWithHttpInfoAsync(ident, addPackageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a package to the basket This adds a package (an object describing the product) to the basket &#x60;{ident}&#x60;. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="addPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<Basket>> AddPackageWithHttpInfoAsync(string ident, AddPackageRequest? addPackageRequest = default(AddPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ident' is set
            if (ident == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'ident' when calling BasketsApi->AddPackage");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ident", TebexCheckout.Client.ClientUtils.ParameterToString(ident)); // path parameter
            localVarRequestOptions.Data = addPackageRequest;

            localVarRequestOptions.Operation = "BasketsApi.AddPackage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Basket>("/baskets/{ident}/packages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a sale to the basket Adds a &#x60;Sale&#x60; to the basket with &#x60;{ident}&#x60;. **Sales cannot be applied to baskets with &#x60;revenue_share&#x60; set.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="sale">Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket AddSaleToBasket(string ident, Sale? sale = default(Sale?), int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = AddSaleToBasketWithHttpInfo(ident, sale);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a sale to the basket Adds a &#x60;Sale&#x60; to the basket with &#x60;{ident}&#x60;. **Sales cannot be applied to baskets with &#x60;revenue_share&#x60; set.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="sale">Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public TebexCheckout.Client.ApiResponse<Basket> AddSaleToBasketWithHttpInfo(string ident, Sale? sale = default(Sale?), int operationIndex = 0)
        {
            // verify the required parameter 'ident' is set
            if (ident == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'ident' when calling BasketsApi->AddSaleToBasket");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ident", TebexCheckout.Client.ClientUtils.ParameterToString(ident)); // path parameter
            localVarRequestOptions.Data = sale;

            localVarRequestOptions.Operation = "BasketsApi.AddSaleToBasket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Basket>("/baskets/{ident}/sales", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSaleToBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a sale to the basket Adds a &#x60;Sale&#x60; to the basket with &#x60;{ident}&#x60;. **Sales cannot be applied to baskets with &#x60;revenue_share&#x60; set.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="sale">Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> AddSaleToBasketAsync(string ident, Sale? sale = default(Sale?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = await AddSaleToBasketWithHttpInfoAsync(ident, sale, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a sale to the basket Adds a &#x60;Sale&#x60; to the basket with &#x60;{ident}&#x60;. **Sales cannot be applied to baskets with &#x60;revenue_share&#x60; set.**
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="sale">Provide a &#x60;Sale&#x60; as an object to apply it to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<Basket>> AddSaleToBasketWithHttpInfoAsync(string ident, Sale? sale = default(Sale?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ident' is set
            if (ident == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'ident' when calling BasketsApi->AddSaleToBasket");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ident", TebexCheckout.Client.ClientUtils.ParameterToString(ident)); // path parameter
            localVarRequestOptions.Data = sale;

            localVarRequestOptions.Operation = "BasketsApi.AddSaleToBasket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Basket>("/baskets/{ident}/sales", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSaleToBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a basket that can be used to pay for items This will create and return a &#x60;Basket&#x60; that can be paid for by redirecting the user to &#x60;links.checkout&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBasketRequest">Create a basket, returning the full basket object and payment link. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket CreateBasket(CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = CreateBasketWithHttpInfo(createBasketRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a basket that can be used to pay for items This will create and return a &#x60;Basket&#x60; that can be paid for by redirecting the user to &#x60;links.checkout&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBasketRequest">Create a basket, returning the full basket object and payment link. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public TebexCheckout.Client.ApiResponse<Basket> CreateBasketWithHttpInfo(CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0)
        {
            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBasketRequest;

            localVarRequestOptions.Operation = "BasketsApi.CreateBasket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Basket>("/baskets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a basket that can be used to pay for items This will create and return a &#x60;Basket&#x60; that can be paid for by redirecting the user to &#x60;links.checkout&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBasketRequest">Create a basket, returning the full basket object and payment link. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> CreateBasketAsync(CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = await CreateBasketWithHttpInfoAsync(createBasketRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a basket that can be used to pay for items This will create and return a &#x60;Basket&#x60; that can be paid for by redirecting the user to &#x60;links.checkout&#x60;
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBasketRequest">Create a basket, returning the full basket object and payment link. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<Basket>> CreateBasketWithHttpInfoAsync(CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBasketRequest;

            localVarRequestOptions.Operation = "BasketsApi.CreateBasket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Basket>("/baskets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a basket by its identifier Gets the basket associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket GetBasketById(string ident, int operationIndex = 0)
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = GetBasketByIdWithHttpInfo(ident);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a basket by its identifier Gets the basket associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public TebexCheckout.Client.ApiResponse<Basket> GetBasketByIdWithHttpInfo(string ident, int operationIndex = 0)
        {
            // verify the required parameter 'ident' is set
            if (ident == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'ident' when calling BasketsApi->GetBasketById");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ident", TebexCheckout.Client.ClientUtils.ParameterToString(ident)); // path parameter

            localVarRequestOptions.Operation = "BasketsApi.GetBasketById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Basket>("/baskets/{ident}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasketById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a basket by its identifier Gets the basket associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> GetBasketByIdAsync(string ident, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexCheckout.Client.ApiResponse<Basket> localVarResponse = await GetBasketByIdWithHttpInfoAsync(ident, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a basket by its identifier Gets the basket associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<Basket>> GetBasketByIdWithHttpInfoAsync(string ident, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ident' is set
            if (ident == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'ident' when calling BasketsApi->GetBasketById");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ident", TebexCheckout.Client.ClientUtils.ParameterToString(ident)); // path parameter

            localVarRequestOptions.Operation = "BasketsApi.GetBasketById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Basket>("/baskets/{ident}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasketById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a row from the basket This will remove the given &#x60;{rows.id}&#x60; from the basket &#x60;{ident}&#x60;. The basket must be re-fetched after running to receive updated totals.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="rowsId">The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveRowFromBasket(string ident, int rowsId, int operationIndex = 0)
        {
            RemoveRowFromBasketWithHttpInfo(ident, rowsId);
        }

        /// <summary>
        /// Remove a row from the basket This will remove the given &#x60;{rows.id}&#x60; from the basket &#x60;{ident}&#x60;. The basket must be re-fetched after running to receive updated totals.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="rowsId">The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TebexCheckout.Client.ApiResponse<Object> RemoveRowFromBasketWithHttpInfo(string ident, int rowsId, int operationIndex = 0)
        {
            // verify the required parameter 'ident' is set
            if (ident == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'ident' when calling BasketsApi->RemoveRowFromBasket");
            }

            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ident", TebexCheckout.Client.ClientUtils.ParameterToString(ident)); // path parameter
            localVarRequestOptions.PathParameters.Add("rows.id", TebexCheckout.Client.ClientUtils.ParameterToString(rowsId)); // path parameter

            localVarRequestOptions.Operation = "BasketsApi.RemoveRowFromBasket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/baskets/{ident}/packages/{rows.id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRowFromBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a row from the basket This will remove the given &#x60;{rows.id}&#x60; from the basket &#x60;{ident}&#x60;. The basket must be re-fetched after running to receive updated totals.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="rowsId">The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveRowFromBasketAsync(string ident, int rowsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveRowFromBasketWithHttpInfoAsync(ident, rowsId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a row from the basket This will remove the given &#x60;{rows.id}&#x60; from the basket &#x60;{ident}&#x60;. The basket must be re-fetched after running to receive updated totals.
        /// </summary>
        /// <exception cref="TebexCheckout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ident">The basket identifier.</param>
        /// <param name="rowsId">The &#x60;id&#x60; of the &#x60;basket.rows&#x60; row to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TebexCheckout.Client.ApiResponse<Object>> RemoveRowFromBasketWithHttpInfoAsync(string ident, int rowsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ident' is set
            if (ident == null)
            {
                throw new TebexCheckout.Client.ApiException(400, "Missing required parameter 'ident' when calling BasketsApi->RemoveRowFromBasket");
            }


            TebexCheckout.Client.RequestOptions localVarRequestOptions = new TebexCheckout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexCheckout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexCheckout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ident", TebexCheckout.Client.ClientUtils.ParameterToString(ident)); // path parameter
            localVarRequestOptions.PathParameters.Add("rows.id", TebexCheckout.Client.ClientUtils.ParameterToString(rowsId)); // path parameter

            localVarRequestOptions.Operation = "BasketsApi.RemoveRowFromBasket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tebex_checkout_auth_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TebexCheckout.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/baskets/{ident}/packages/{rows.id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRowFromBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
