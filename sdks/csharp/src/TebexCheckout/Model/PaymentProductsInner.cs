/*
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TebexCheckout.Client.OpenAPIDateConverter;

namespace TebexCheckout.Model
{
    /// <summary>
    /// PaymentProductsInner
    /// </summary>
    [DataContract(Name = "Payment_products_inner")]
    public partial class PaymentProductsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProductsInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="basePrice">basePrice.</param>
        /// <param name="paidPrice">paidPrice.</param>
        /// <param name="variables">variables.</param>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="custom">Any custom data associated with the payment.</param>
        /// <param name="username">username.</param>
        public PaymentProductsInner(string id = default(string), string name = default(string), int quantity = default(int), PaymentProductsInnerBasePrice basePrice = default(PaymentProductsInnerBasePrice), PaymentProductsInnerPaidPrice paidPrice = default(PaymentProductsInnerPaidPrice), List<string> variables = default(List<string>), DateTime? expiresAt = default(DateTime?), Object custom = default(Object), string username = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Quantity = quantity;
            this.BasePrice = basePrice;
            this.PaidPrice = paidPrice;
            this.Variables = variables;
            this.ExpiresAt = expiresAt;
            this.Custom = custom;
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        [DataMember(Name = "base_price", EmitDefaultValue = false)]
        public PaymentProductsInnerBasePrice BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets PaidPrice
        /// </summary>
        [DataMember(Name = "paid_price", EmitDefaultValue = false)]
        public PaymentProductsInnerPaidPrice PaidPrice { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public List<string> Variables { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "expires_at", EmitDefaultValue = true)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Any custom data associated with the payment
        /// </summary>
        /// <value>Any custom data associated with the payment</value>
        [DataMember(Name = "custom", EmitDefaultValue = false)]
        public Object Custom { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentProductsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  PaidPrice: ").Append(PaidPrice).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
