/*
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TebexCheckout.Client.OpenAPIDateConverter;

namespace TebexCheckout.Model
{
    /// <summary>
    /// BasketRowMeta
    /// </summary>
    [DataContract(Name = "BasketRow_meta")]
    public partial class BasketRowMeta : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasketRowMeta" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="rowprice">rowprice.</param>
        /// <param name="initialprice">initialprice.</param>
        /// <param name="isCumulative">isCumulative.</param>
        /// <param name="requiredPackages">requiredPackages.</param>
        /// <param name="requiresAny">requiresAny.</param>
        /// <param name="category">category.</param>
        /// <param name="producesGiftCard">producesGiftCard.</param>
        /// <param name="allowsGiftCards">allowsGiftCards.</param>
        /// <param name="servers">servers.</param>
        /// <param name="limits">limits.</param>
        /// <param name="hasDeliverables">hasDeliverables.</param>
        /// <param name="deliverableTypes">deliverableTypes.</param>
        /// <param name="downloadLink">downloadLink.</param>
        /// <param name="hasSellerProtection">hasSellerProtection.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="revenueShare">revenueShare.</param>
        /// <param name="image">image.</param>
        /// <param name="realprice">realprice.</param>
        public BasketRowMeta(string name = default(string), float rowprice = default(float), float initialprice = default(float), bool isCumulative = default(bool), List<int> requiredPackages = default(List<int>), bool requiresAny = default(bool), bool category = default(bool), bool producesGiftCard = default(bool), bool allowsGiftCards = default(bool), List<int> servers = default(List<int>), BasketRowMetaLimits limits = default(BasketRowMetaLimits), bool hasDeliverables = default(bool), List<string> deliverableTypes = default(List<string>), string downloadLink = default(string), bool hasSellerProtection = default(bool), string itemType = default(string), List<float> revenueShare = default(List<float>), string image = default(string), float realprice = default(float))
        {
            this.Name = name;
            this.Rowprice = rowprice;
            this.Initialprice = initialprice;
            this.IsCumulative = isCumulative;
            this.RequiredPackages = requiredPackages;
            this.RequiresAny = requiresAny;
            this.Category = category;
            this.ProducesGiftCard = producesGiftCard;
            this.AllowsGiftCards = allowsGiftCards;
            this.Servers = servers;
            this.Limits = limits;
            this.HasDeliverables = hasDeliverables;
            this.DeliverableTypes = deliverableTypes;
            this.DownloadLink = downloadLink;
            this.HasSellerProtection = hasSellerProtection;
            this.ItemType = itemType;
            this.RevenueShare = revenueShare;
            this.Image = image;
            this.Realprice = realprice;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>1000 Gold</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rowprice
        /// </summary>
        /// <example>2.54</example>
        [DataMember(Name = "rowprice", EmitDefaultValue = false)]
        public float Rowprice { get; set; }

        /// <summary>
        /// Gets or Sets Initialprice
        /// </summary>
        /// <example>1.27</example>
        [DataMember(Name = "initialprice", EmitDefaultValue = false)]
        public float Initialprice { get; set; }

        /// <summary>
        /// Gets or Sets IsCumulative
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "isCumulative", EmitDefaultValue = true)]
        public bool IsCumulative { get; set; }

        /// <summary>
        /// Gets or Sets RequiredPackages
        /// </summary>
        /// <example>[]</example>
        [DataMember(Name = "requiredPackages", EmitDefaultValue = false)]
        public List<int> RequiredPackages { get; set; }

        /// <summary>
        /// Gets or Sets RequiresAny
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "requiresAny", EmitDefaultValue = true)]
        public bool RequiresAny { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public bool Category { get; set; }

        /// <summary>
        /// Gets or Sets ProducesGiftCard
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "producesGiftCard", EmitDefaultValue = true)]
        public bool ProducesGiftCard { get; set; }

        /// <summary>
        /// Gets or Sets AllowsGiftCards
        /// </summary>
        /// <example>true</example>
        [DataMember(Name = "allowsGiftCards", EmitDefaultValue = true)]
        public bool AllowsGiftCards { get; set; }

        /// <summary>
        /// Gets or Sets Servers
        /// </summary>
        /// <example>[]</example>
        [DataMember(Name = "servers", EmitDefaultValue = false)]
        public List<int> Servers { get; set; }

        /// <summary>
        /// Gets or Sets Limits
        /// </summary>
        [DataMember(Name = "limits", EmitDefaultValue = false)]
        public BasketRowMetaLimits Limits { get; set; }

        /// <summary>
        /// Gets or Sets HasDeliverables
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "hasDeliverables", EmitDefaultValue = true)]
        public bool HasDeliverables { get; set; }

        /// <summary>
        /// Gets or Sets DeliverableTypes
        /// </summary>
        /// <example>[]</example>
        [DataMember(Name = "deliverableTypes", EmitDefaultValue = false)]
        public List<string> DeliverableTypes { get; set; }

        /// <summary>
        /// Gets or Sets DownloadLink
        /// </summary>
        [DataMember(Name = "downloadLink", EmitDefaultValue = false)]
        public string DownloadLink { get; set; }

        /// <summary>
        /// Gets or Sets HasSellerProtection
        /// </summary>
        /// <example>true</example>
        [DataMember(Name = "hasSellerProtection", EmitDefaultValue = true)]
        public bool HasSellerProtection { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "itemType", EmitDefaultValue = true)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets RevenueShare
        /// </summary>
        /// <example>[]</example>
        [DataMember(Name = "revenue_share", EmitDefaultValue = false)]
        public List<float> RevenueShare { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Realprice
        /// </summary>
        /// <example>1.27</example>
        [DataMember(Name = "realprice", EmitDefaultValue = false)]
        public float Realprice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BasketRowMeta {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rowprice: ").Append(Rowprice).Append("\n");
            sb.Append("  Initialprice: ").Append(Initialprice).Append("\n");
            sb.Append("  IsCumulative: ").Append(IsCumulative).Append("\n");
            sb.Append("  RequiredPackages: ").Append(RequiredPackages).Append("\n");
            sb.Append("  RequiresAny: ").Append(RequiresAny).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ProducesGiftCard: ").Append(ProducesGiftCard).Append("\n");
            sb.Append("  AllowsGiftCards: ").Append(AllowsGiftCards).Append("\n");
            sb.Append("  Servers: ").Append(Servers).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  HasDeliverables: ").Append(HasDeliverables).Append("\n");
            sb.Append("  DeliverableTypes: ").Append(DeliverableTypes).Append("\n");
            sb.Append("  DownloadLink: ").Append(DownloadLink).Append("\n");
            sb.Append("  HasSellerProtection: ").Append(HasSellerProtection).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  RevenueShare: ").Append(RevenueShare).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Realprice: ").Append(Realprice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
