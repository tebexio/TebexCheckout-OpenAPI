/*
 * Tebex Checkout API
 *
 * The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.  You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using TebexCheckout.Client;
using TebexCheckout.TebexCheckout;
// uncomment below to import models
//using TebexCheckout.Model;

namespace TebexCheckout.Test.Api
{
    /// <summary>
    ///  Class for testing BasketsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BasketsApiTests : IDisposable
    {
        private BasketsApi instance;

        public BasketsApiTests()
        {
            instance = new BasketsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BasketsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BasketsApi
            //Assert.IsType<BasketsApi>(instance);
        }

        /// <summary>
        /// Test AddPackage
        /// </summary>
        [Fact]
        public void AddPackageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ident = null;
            //AddPackageRequest? addPackageRequest = null;
            //var response = instance.AddPackage(ident, addPackageRequest);
            //Assert.IsType<Basket>(response);
        }

        /// <summary>
        /// Test AddSaleToBasket
        /// </summary>
        [Fact]
        public void AddSaleToBasketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ident = null;
            //Sale? sale = null;
            //var response = instance.AddSaleToBasket(ident, sale);
            //Assert.IsType<Basket>(response);
        }

        /// <summary>
        /// Test CreateBasket
        /// </summary>
        [Fact]
        public void CreateBasketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateBasketRequest? createBasketRequest = null;
            //var response = instance.CreateBasket(createBasketRequest);
            //Assert.IsType<Basket>(response);
        }

        /// <summary>
        /// Test GetBasketById
        /// </summary>
        [Fact]
        public void GetBasketByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ident = null;
            //var response = instance.GetBasketById(ident);
            //Assert.IsType<Basket>(response);
        }

        /// <summary>
        /// Test RemoveRowFromBasket
        /// </summary>
        [Fact]
        public void RemoveRowFromBasketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ident = null;
            //int rowId = null;
            //instance.RemoveRowFromBasket(ident, rowId);
        }
    }
}
