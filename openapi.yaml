openapi: 3.0.3
info:
  title: Tebex Checkout API
  description: |-
    The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.
    
    You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
  termsOfService: https://tebex.io/terms-creator-agreement
  contact:
    email: tebex-integrations@overwolf.com
  license:
    name: MIT
    url: https://opensource.org/license/mit
  version: 1.0.0
servers:
  - url: https://checkout.tebex.io/api
tags:
  - name: Ident
    description: A string identifier representing the basket
  - name: Baskets
    description: To start a transaction, a basket must be created. The basket, similar to a standard eCommerce basket will contain the items that the customer is purchasing.
  - name: Recurring Payments
    description: Payments with reference IDs like `tbx-r-`. Can be paused, reeactivated, and cancelled provided a valid reference id.
  - name: Payments
    description: Single payments (`tbx-`) can be fetched and refunded with a valid reference id.
paths:
  /baskets/{ident}:
    get:
      tags:
      - Baskets
      operationId: getBasketById
      summary: Fetch a basket by its identifier
  /baskets/{ident}/packages:
    post:
      tags:
      - Baskets
      operationId: addPackageToBasket
      summary: Add a package to the basket
      description: This adds a package (an object descripting the product) to the basket `{ident}`
  /baskets/{ident}/packages/{row.id}:
    delete:
      tags:
      - Baskets
      operationId: removeRowFromBasket
      summary: 
        Remove a row from the basket
      description:
        This will remove the given `{row.id}` from the basket `{ident}`. The basket must be re-fetched after running to receive updated totals.
  /baskets/{ident}/sales:
    post:
      tags:
      - Baskets
      operationId: addSaleToBasket
      summary:
        Add a sale to the basket
      description: Adds a `Sale` to the basket with `{ident}`. Sales cannot be applied to baskets with `revenue_share` set.
      requestBody:
        description: Provide a `Sale` as an object to apply it to the basket.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
  /checkout:
    post:
      tags:
      - Checkout
      operationId: createCheckoutRequest
      summary:
        Create a checkout request
      description: This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
  /payments/{txnId}?type=txn_id:
    get:
      tags:
      - Payments
      operationId: getPaymentById
      summary: Fetch a payment by its transaction ID
      description: This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with `tbx-`
      parameters:
        - in: path
          name: txnId
          schema:
            type: string
            example: tbx-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The payment reference to fetch.
  /payments/{txnId}/refund?type=txn_id:
    post:
      tags:
      - Payments
      operationId: refundPaymentById
      summary: Refund a payment by its transaction ID
      description: This will refund the given payment associated with this transaction id.
      parameters:
        - in: path
          name: txnId
          schema:
            type: string
            example: tbx-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The payment reference to refund.
  /recurring-payments/{reference}:
    get:
      tags:
      - Recurring Payments
      operationId: getRecurringPayment
      summary: Fetch a recurring payment (subscription) by its reference
      parameters:
        - in: path
          name: reference
          schema:
            type: string
            example: tbx-r-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The recurring payment reference to fetch.
    put:
      tags: 
      - Recurring Payments
      operationId: updateSubscription
      summary: Update a subscription with a new product / amount to pay - replacing the existing product
      description: If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date. `This endpoint requires prior approval - please contact your account manager.`
    delete:
      tags:
      - Recurring Payments
      summary: Cancel a recurring payment
      description: This cancels the recurring payment for the reference provided. Recurring payment references start with `tbx-r-`
      operationId: cancelRecurringPayment
      parameters:
        - in: path
          name: reference
          schema:
            type: string
            example: tbx-r-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The recurring payment reference to cancel.
  /recurring-payments/{reference}/status:
    put:
      tags:
      - Recurring Payments
      operationId: pauseOrReactivateRecurringPayment
      summary: Pause or reactivate a recurring payment
      parameters:
        - in: path
          name: reference
          schema:
            type: string
            example: tbx-r-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The recurring payment reference to update.
  /baskets:
    post:
      tags:
      - Baskets
      summary: Create a basket that can be used to pay for items
      description: This will create and return a `Basket` that can be paid for by redirecting the user to `links.checkout`
      operationId: createBasket
      requestBody:
        description: Create a basket, returning the full basket object and payment link.
        content:
          application/json:
            schema:
              type: object
              properties:
                return_url:
                  type: string
                  description: The URL a customer can return to without completing checkout
                  example: "https://example.tebex.io/"
                complete_url:
                  type: string
                  description: URL the customer can return to after completing payment
                  example: "https://example.tebex.io/complete"
                custom:
                  type: object
                  description: Any custom data to be passed through the request. This will be returned in a post-completion webhook.
                  example: {
                    foo: bar,
                  }
                first_name:
                  type: string
                  description: The first name of the customer
                  example: Neil
                last_name:
                  type: string
                  description: The last name of the customer
                  example: McNeil
                email:
                  type: string
                  description: The email address of the customer
                  example: example@tebex.io
                expires_at:
                  type: string
                  description: An ISO8601 formatted date. After this date the basket cannot be used to checkout.
                  example: 2024-01-27T18:09:51Z
                complete_auto_redirect:
                  type: boolean
                  description: Automatically redirect to the complete_url provided
                  example: true
                country:
                  type: string
                  description: An ISO 3166-1 alpha-2 character code representing the customer's country.
                  example: US
                creator_code:
                  type: string
                  description: The creator code that should automatically be applied to this basket #TODO
      responses:
        '200':
          description: Basket created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Basket"
        '400':
          description: Invalid basket information provided
components:
  schemas:
    ErrorResponse:
      $ref: ./schemas/ErrorResponse-RFC7807.yaml
    Basket:
      $ref: ./schemas/Basket.yaml
    BasketLinks:
      $ref: ./schemas/BasketLinks.yaml
    PriceDetails:
      $ref: ./schemas/PriceDetails.yaml
    Address:
      $ref: ./schemas/Address.yaml
    Sale:
      $ref: ./schemas/Sale.yaml
  requestBodies:
    Basket:
      description: A basket with items to be purchased
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Basket'
  securitySchemes:
    tebex_checkout_auth_basic:
      type: http
      scheme: basic