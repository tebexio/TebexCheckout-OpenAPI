openapi: 3.0.3
info:
  title: Tebex Checkout API
  description: |-
    The Checkout APIs are designed to allow our creators to use the Tebex Checkout flow and payment acceptance capabilities without the need to set up a Tebex-powered webstore. Using these APIs allows you to create baskets with custom products (as opposed to pre-created products on our webstore platform), and send customers directly to the checkout flow to proceed with payment options.
    
    You must receive prior authorisation before the Checkout API is enabled on your account. Please contact customer support or your account manager to discover if you qualify to use the Checkout API before beginning integration.
  termsOfService: https://tebex.io/terms-creator-agreement
  contact:
    email: tebex-integrations@overwolf.com
  license:
    name: MIT
    url: https://opensource.org/license/mit
  version: 1.0.0
servers:
  - url: https://checkout.tebex.io/api
tags:
  - name: Ident
    description: A string identifier representing the basket
  - name: Baskets
    description: To start a transaction, a basket must be created. The basket, similar to a standard eCommerce basket will contain the items that the customer is purchasing.
  - name: Recurring Payments
    description: Payments with reference IDs like `tbx-r-`. Can be paused, reeactivated, and cancelled provided a valid reference id.
  - name: Payments
    description: Single payments (`tbx-`) can be fetched and refunded with a valid reference id.
paths:
  /baskets/{ident}:
    get:
      tags:
      - Baskets
      operationId: getBasketById
      summary: Fetch a basket by its identifier
      parameters:
        - in: path
          name: ident
          schema:
            type: string
            example: 1a-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The basket identifier.
      description: |- 
          Gets the basket associated with the provided identifier.
      responses:
        '200':
          description: |- 
            Successful response returns the basket.
            
            The `links.payment` property is only returned if the basket has been paid for, and a payment exist with the **complete**/**refund**/**chargeback** status.

            The `links.checkout` property is only returned if the basket has not been paid, and is the URL to send the customer to in order to complete payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '404':
          description: Basket not found.               
  /baskets/{ident}/packages:
    post:
      parameters:
      - in: path
        name: ident
        schema:
          type: string
          example: 1a-55fff4107740a1f40d844ff89607557f45bfafb3
        required: true
        description: The basket identifier.
      tags:
      - Baskets
      operationId: addPackage
      summary: Add a package to the basket
      description: This adds a package (an object describing the product) to the basket `{ident}`. For subscriptions, **only one subscription item may be in a basket at a time**, and it cannot be included with one-time payment items. **This endpoint requires prior approval. Please contact your account manager.**
      requestBody:
        content:
          application/json:
            schema:
              properties:
                package:
                  $ref: '#/components/schemas/Package'
                qty:
                  type: integer
                  description: The quantity of `package` in this basket. This is not the total quantity of overall items in the basket.
                  example: 2
                type:
                  type: string
                  enum: [single,subscription]
                  example: single
                  description: The type of payment, either `single` for one-time payments or `subscription`.
                  required: [single]
                revenue_share:
                  type: array
                  description: An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**
                  items:
                    $ref: '#/components/schemas/RevenueShare'
      responses:
        '200':
          description: Package is successfully added to the basket, and basket is returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Basket"
        '400':
          description: Improperly formatted package. See ErrorResponse.
        '404':
          description: Basket not found.
  /baskets/{ident}/packages/{row.id}:
    delete:
      parameters:
      - in: path
        name: ident
        schema:
          type: string
          example: 1a-55fff4107740a1f40d844ff89607557f45bfafb3
        required: true
        description: The basket identifier.
      - in: path
        name: row.id
        schema:
          type: integer
          example: 1
        required: true
        description: The `id` of the `basket.rows` row to remove.
      tags:
      - Baskets
      operationId: removeRowFromBasket
      summary: 
        Remove a row from the basket
      description:
        This will remove the given `{row.id}` from the basket `{ident}`. The basket must be re-fetched after running to receive updated totals.
      responses:
        '204':
          description: Successfully deleted a row from the basket.
        '400':
          description: Bad Request. See ErrorResponse.
        '404':
          description: Row or basket not found.
  /baskets/{ident}/sales:
    post:
      parameters:
      - in: path
        name: ident
        schema:
          type: string
          example: 1a-55fff4107740a1f40d844ff89607557f45bfafb3
        required: true
        description: The basket identifier.
      tags:
      - Baskets
      operationId: addSaleToBasket
      summary:
        Add a sale to the basket
      description: Adds a `Sale` to the basket with `{ident}`. **Sales cannot be applied to baskets with `revenue_share` set.**
      requestBody:
        description: Provide a `Sale` as an object to apply it to the basket.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
      responses:
        '200':
          description: Successfully adds sale to basket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: Bad request. Improperly formatted Sale or this basket cannot accept sales. See ErrorResponse.
        '404':
          description: Basket not found.
  /checkout:
    post:
      tags:
      - Checkout
      operationId: checkout
      summary:
        Create a checkout request
      description: This API call allows the complete checkout flow (create basket, add items, add sale) to be made in a single API call, for when the Seller is managing the basket locally. **This endpoint requires prior approval - please contact your account manager.**
      requestBody:
        description: Provide a `Basket`, an array of `Packages` to be added to the basket, and an optional `Sale` to complete the full checkout flow in one call. **Only one subscription item may be in the basket at a time.**
        content:
          application/json:
            schema:
              required:
                - "basket"
                - "items"
              properties:
                basket:
                  description: An object containing the customer's information, relevant links, and any custom tracking data.
                  type: object
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    email:
                      type: string
                    return_url:
                      type: string
                    complete_url:
                      type: string
                    custom:
                      type: object
                  example:
                    first_name: Neil
                    last_name: McNeil
                    email: example@tebex.io
                    return_url: https://tebex.io
                    complete_url: https://tebex.io
                    custom: {
                        "foo": "bar",
                        "trackingId": 127,
                        "list": ["1", "2", "3"]
                    }
                items:
                  type: array
                  description: An array of `Packages` in the basket.
                  items:
                    $ref: '#/components/schemas/CheckoutItem'
                sale:
                  $ref: '#/components/schemas/Sale'
      responses:
        '200':
          description: Successfully created basket. The basket will be returned with `links` containing the URLs you should direct the customer to in order to complete payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '400':
          description: Bad Request. See ErrorResponse.
              
  /payments/{txnId}?type=txn_id:
    get:
      tags:
      - Payments
      operationId: getPaymentById
      summary: Fetch a payment by its transaction ID
      description: This will fetch the given payment associated with this transaction id. Single payment transaction IDs begin with `tbx-`
      parameters:
        - in: path
          name: txnId
          schema:
            type: string
            example: tbx-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The payment reference to fetch.
      responses:
        '200':
          description: Payment fetched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Transaction not found.
  /payments/{txnId}/refund?type=txn_id:
    post:
      tags:
      - Payments
      operationId: refundPaymentById
      summary: Refund a payment by its transaction ID
      description: This will refund the given payment associated with this transaction id.
      parameters:
        - in: path
          name: txnId
          schema:
            type: string
            example: tbx-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The payment reference to refund.
      responses:
        '200':
          description: Payment refunded successfully. The payment details are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '422':
          description: The payment cannot be refunded. Payments can only be refunded when a payment's `status` is Completed.
        '404':
          description: Payment not found.
  /recurring-payments/{reference}:
    get:
      tags:
      - Recurring Payments
      operationId: getRecurringPayment
      summary: Fetch a recurring payment (subscription) by its reference
      parameters:
        - in: path
          name: reference
          schema:
            type: string
            example: tbx-r-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The recurring payment reference to fetch.
      responses:
        '200':
          description: Successfully fetched recurring payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringPayment'
        '404':
          description: Recurring payment not found.
    put:
      tags: 
      - Recurring Payments
      operationId: updateSubscription
      summary: Update a subscription with a new product / amount to pay - replacing the existing product
      description: |- 
        If the new subscription amount is higher than the existing amount, a pro-rata charge will be made to cover the cost of the new price up until the next billing date. 
        
        **This endpoint requires prior approval - please contact your account manager.**
      parameters:
        - in: path
          name: reference
          schema:
            type: string
            example: tbx-r-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The recurring payment reference to fetch.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                items:
                  description: An array containing the item to be added to the recurring payment. **Only 1 item is supported at this time.**
                  type: array
                  items:
                    type: object
                    properties:
                      package:
                        $ref: '#/components/schemas/Package'
      responses:
        '200':
          description: Successfully updated subscription. The updated `RecurringPayment` is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringPayment'
        '400':
          description: Bad Request.
        '404':
          description: Recurring payment not found.
    delete:
      tags:
      - Recurring Payments
      summary: Cancel a recurring payment
      description: This cancels the recurring payment for the reference provided. Recurring payment references start with `tbx-r-`
      operationId: cancelRecurringPayment
      parameters:
        - in: path
          name: reference
          schema:
            type: string
            example: tbx-r-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The recurring payment reference to cancel.
      responses:
        '200':
          description: Recurring payment cancelled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringPayment'
        '404':
          description: Recurring payment not found.
  /recurring-payments/{reference}/status:
    put:
      tags:
      - Recurring Payments
      operationId: updateRecurringPayment
      summary: Pause or reactivate a recurring payment
      parameters:
        - in: path
          name: reference
          schema:
            type: string
            example: tbx-r-55fff4107740a1f40d844ff89607557f45bfafb3
          required: true
          description: The recurring payment reference to update.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - "status"
              properties:
                status:
                  type: string
                  enum: [Paused,Active]
                  description: Your desired state of the recurring payment. Provide `Paused` with `paused_until` to pause a recurring payment. Otherwise, provide `Active` to resume a recurring payment.
                  example: Paused
                paused_until:
                  type: string
                  description: "To pause a payment, provide a ISO8601 formatted date on which the payment should be reactivated."
                  example: 2025-01-27T16:43:53.000000Z
      responses:
        '200':
          description: Successfully paused or reactivated a payment. The `RecurringPayment` is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringPayment'
        '400':
          description: Bad Request. Some data is missing or incorrect. See ErrorResponse.
        '422':
          description: Unprocessible Entity. An invalid status was provided or the recurring payment cannot be processed. See ErrorResponse.
        '404':
          description: Recurring payment not found.
  /baskets:
    post:
      tags:
      - Baskets
      summary: Create a basket that can be used to pay for items
      description: This will create and return a `Basket` that can be paid for by redirecting the user to `links.checkout`
      operationId: createBasket
      requestBody:
        description: Create a basket, returning the full basket object and payment link.
        content:
          application/json:
            schema:
              type: object
              properties:
                return_url:
                  type: string
                  description: The URL a customer can return to without completing checkout
                  example: "https://example.tebex.io/"
                complete_url:
                  type: string
                  description: URL the customer can return to after completing payment
                  example: "https://example.tebex.io/complete"
                custom:
                  type: object
                  description: Any custom data to be passed through the request. This will be returned in a post-completion webhook.
                  example: {
                    foo: bar,
                  }
                first_name:
                  type: string
                  description: The first name of the customer
                  example: Neil
                last_name:
                  type: string
                  description: The last name of the customer
                  example: McNeil
                email:
                  type: string
                  description: The email address of the customer
                  example: example@tebex.io
                expires_at:
                  type: string
                  description: An ISO8601 formatted date. After this date the basket cannot be used to checkout.
                  example: 2025-01-27T18:09:51Z
                complete_auto_redirect:
                  type: boolean
                  description: Automatically redirect to the complete_url provided
                  example: true
                country:
                  type: string
                  description: An ISO 3166-1 alpha-2 character code representing the customer's country.
                  example: US
                creator_code:
                  type: string
                  description: The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes
                  example: 
      responses:
        '200':
          description: Basket created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Basket"
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        type: 
          description: A URI reference [RFC3986] that identifies the
            problem type.  This specification encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
            this member is not present, its value is assumed to be
            "about:blank".
        title: 
          type: string
          description: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization
          example: Bad Request
        status:
          type: integer
          description: The HTTP status code generated by the origin server for the occurrence of the problem.
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Parameter 'first_name' is required.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced
          example: /path/to/ref

    CheckoutItem:
      type: object
      description: An item added to a basket as part of the `/checkout` request.
      properties:
        package:
          $ref: '#/components/schemas/Package'
          example:
            price: 1.27
            name: 1000 Gold

    GiftCard: #TODO
      type: object
    
    RecurringPeriod: #TODO
      type: object

    Tax: #TODO
      type: object

    Discount: #TODO
      type: object

    Coupon: #TODO
      type: object

    Basket:
      type: object
      properties:
        ident:
          type: string
          example: 1a-55fff4107740a1f40d844ff89607557f45bfafb3
        expire:
          type: string
          example: 2022-10-25 15:15:40
        price:
          type: number
          example: 1.27
        priceDetails:
          $ref: '#/components/schemas/PriceDetails'
        type:
          type: string
          example: single
        recurring:
          type: boolean
          example: false
        recurringPeriod:
          $ref: '#/components/schemas/RecurringPeriod'
          nullable: true
        recurringNextPaymentDate:
          type: string
          nullable: true
        isPaymentMethodUpdate:
          type: boolean
          example: false
        returnUrl:
          type: string
          nullable: true
          example: null
        complete:
          type: boolean
          example: false
        tax:
          $ref: '#/components/schemas/Tax'
        username:
          type: string
          example: null
          nullable: true
        discounts:
          type: array 
          items:
            $ref: '#/components/schemas/Discount'
        coupons:
          type: array 
          items:
            $ref: '#/components/schemas/Coupon'
        giftcards:
          type: array
          items:
            $ref: '#/components/schemas/GiftCard'
        address:
          $ref: '#/components/schemas/Address'
#        actions:
#          type: object
#          example: null 
#          description: A set of actions associated with the Basket, to be provided via login webhooks.
#          nullable: true
#        game_currency:
#          type: object
#          example: null
#          description: Deprecated
#          nullable: true
#        tebex_account_id:
#          type: string
#          example: null
#          description: Deprecated
#        verified:
#          type: boolean
#          example: false 
#          description: Potentially deprecated
        rows:
          type: array
          items:
            $ref: "#/components/schemas/BasketItem"
        fingerprint:
          type: string
          example: ""
          description: Browser fingerprint to identify the user
          nullable: true
        creator_code:
          type: string
          description: The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes
        roundup:
          type: boolean
          example: false
          nullable: true
        cancel_url:
          type: string
          example: https://tebex.io
        complete_url:
          type: string
          nullable: true
          example: null
        complete_auto_redirect:
          type: boolean
          example: false
        custom: 
          type: object
          nullable: true
          example: 
            foo: bar
            ref: 1234
        
        links:
          $ref: "#/components/schemas/BasketLinks"

        # payment: #TODO internal only?
        #   $ref: "#/components/schemas/Payment"
        #   nullable: true

    Package:
      type: object
      properties:
        name:
          type: string
          description: The name of the item being purchased. This should be user-friendly as it is shown to the customer on checkout and receipts.
          example: 1000 Gold
        price:
          type: number
          example: 1.27
          description: A float (decimal describing the price of the package in your account currency)
        expiry_period:
          type: string
          enum: [day, month, year]
          description: The renewal period of this item
          example: month
        expiry_length:
          type: integer
          description: An integer representing the number of `expiry_periods` that make up the renewal period.
          example: 3
        metaData:
          type: object
          properties:
            custom:
              type: string
              description: A free-text string field that is passed back to you via the webhook (for example, a tracking ID)
              example: Foo
          example:
            foo: bar
        type: 
          type: string
          enum: [single,subscription]
          example: subscription
          description: The type of payment, either `single` for one-time payments or `subscription`.
    BasketItem:
      type: object
      description: A package within an existing basket.
      properties:
        qty:
          type: integer
          description: The quantity of `package` in this basket. This is not the total quantity of overall items in the basket.
          example: 2
        type:
          type: string
          enum: [single,subscription]
          example: single
          description: The type of payment, either `single` for one-time payments or `subscription`.
        revenue_share:
          type: array
          description: An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**
          items:
            $ref: '#/components/schemas/RevenueShare'
    RevenueShare:
      type: object
      nullable: true
      properties:
        wallet_ref:
          type: string
          example: "centralised_404244_127"
        amount:
          type: number
          example: 0.50
          description: A float (decimal) value representing the amount of this payment in your account currency that is credited to the `wallet_ref`
        gateway_fee_percent:
          type: number
          example: 50.00
          description: A float (decimal) value representing the percentage of the gateway fee that should be dedicated from this wallet’s revenue share. This optional value can be anywhere between 0 - 100.
    BasketLinks:
      type: object
      properties:
        payment:
          type: string
          description: The `links.payment` property is only returned if the basket has been paid for and a payment exists with the `complete`,`refund`, or `chargeback` status.
          example: https://checkout.tebex.io/api/payments/tbx-12345
        checkout:
          type: string
          description: The `links.checkout` property is only returned if the basket has not been paid, and is the URL to send the customer to make payment
          example: https://checkout.tebex.io/checkout/1a-55fff4107740a1f40d844ff89607557f45bfafb3
    PriceDetails:
      type: object
      properties:
        fullPrice:
          type: number
        subTotal:
          type: number
        discounts:
          type: array
          items:
            type: object #TODO
        total:
          type: number
        tax:
          type: number
        balance:
          type: number
        sales:
          type: array
          items:
            $ref: '#/components/schemas/Sale'
        giftcards:
          type: array
          items:
            $ref: '#/components/schemas/GiftCard'
#        recurring:   will be made obsolete in the next few weeks, potential do not document.
#          type: object
#          description: Contains recurring amount. Limited to 1 subscription package in the basket at a time. 
        roundUp:
          type: number
          nullable: true
      example:
        fullPrice: 1.40
        subTotal: 1.27
        discounts: []
        total: 1.40
        surcharges: []
        tax: 0.13
        balance: 0
        sales: []
        giftcards: []
        roundUp: null
    Address:
      type: object
      properties:
        name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        address:
          type: string
        email:
          type: string
        state_id:
          type: string
          nullable: true
        country:
          type: string
        postal_code:
          type: string
      example:
        name: Ted Tebex
        first_name: Ted
        last_name: Tebex
        address: 37 Broadhurst Gardens, London, United Kingdom, NW6 3QT
        email: example@tebex.io
        state_id: null
        country: UK
        postal_code: NW6 3QT
    Sale:
      type: object
      properties:
        name:
          type: string
          description: The name of the sale (displayed to the customer)
          example: Test Sale
        discount_type:
          type: string
          enum: [percentage, amount]
          description: The type of discount, either `percentage` for deducting a percentage of each item, or `amount` to deduct a fixed amount from each item.
          example: amount
        amount:
          type: number
          description: The amount or percentage to deduct
          example: 4.99
    Payment:
      type: object
      nullable: true
      properties:
        transaction_id:
          type: string
          example: "tbx-26929122a56954-0e15be"
        status:
          type: object
          properties:
            id:
              type: integer
              example: 1
            description:
              type: string
              example: "Complete"
        payment_sequence:
          type: string
          example: "oneoff"
        created_at:
          type: string
          format: date-time
          example: "2022-10-19T15:49:15.000000Z"
        price:
          type: object # TODO
          properties:
            amount:
              type: number
              format: float
              example: 5.35
            currency:
              type: string
              example: "USD"
        fees:
          type: object #TODO
          properties:
            tax:
              type: object #TODO
              properties:
                amount:
                  type: number
                  format: float
                  example: 0
                currency:
                  type: string
                  example: "USD"
            gateway:
              type: object #TODO
              properties:
                amount:
                  type: number
                  format: float
                  example: 0.45
                currency:
                  type: string
                  example: "USD"
        customer:
          type: object #TODO
          properties:
            first_name:
              type: string
              example: "Test"
            last_name:
              type: string
              example: "Test"
            email:
              type: string
              example: "test@test.com"
            ip:
              type: string
              example: "1.2.3.4"
            username:
              type: string
              nullable: true
            marketing_consent:
              type: boolean
              example: false
            country:
              type: string
              example: "TS"
            postal_code:
              type: string
              nullable: true
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                nullable: true
              name:
                type: string
              quantity:
                type: integer
              base_price:
                type: object
                properties:
                  amount:
                    type: number
                    format: float
                  currency:
                    type: string
              paid_price:
                type: object
                properties:
                  amount:
                    type: number
                    format: float
                  currency:
                    type: string
              variables:
                type: array
                items:
                  type: string
              expires_at:
                type: string
                format: date-time
                nullable: true
              custom:
                type: string
              username:
                type: string
                nullable: true
        coupons:
          type: array
          items:
            type: string
            example: []
        gift_cards:
          type: array
          items:
            type: string
            example: []
        recurring_payment_reference:
          type: string
          nullable: true
        custom:
          type: object
          properties:
            user:
              type: string
              example: "test@test.com"
            ref:
              type: string
              example: "abc-123"
    RecurringPayment:
      type: object
      properties:
        id:
          type: integer
          example: 5000
        created_at:
          type: string
          format: date-time
          example: "2022-12-16T16:43:06.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2022-12-16T16:43:06.000000Z"
        paused_at:
          type: string
          format: date-time
          nullable: true
        paused_until:
          type: string
          format: date-time
          nullable: true
        next_payment_date:
          type: string
          example: "2022-12-30T16:43:06"
        reference:
          type: string
          example: "88"
        account_id:
          type: integer
          example: 1
        interval:
          type: string
          example: "P2W"
        cancelled_at:
          type: string
          format: date-time
          nullable: true
        status:
          type: object
          properties:
            id:
              type: integer
              example: 2
            class:
              type: string
              example: "success"
            description:
              type: string
              example: "Active"
            active:
              type: integer
              example: 1
        amount:
          type: object
          properties:
            amount:
              type: number
              format: float
              example: 7
            tax:
              type: number
              format: float
              example: 1.4
            period:
              type: string
              example: "P2W"
        cancel_reason:
          type: string
          nullable: true
        links:
          type: object
          properties:
            initial_payment:
              type: string
              example: "https://checkout.tebex.io/api/payments/tbx-123123aabccd123-bf71ad?type=txn_id"
            payment_history:
              type: array
              items:
                type: string
                example: "https://checkout.tebex.io/api/payments/tbx-123123aabccd123-bf71ad?type=txn_id"
  requestBodies:
    Basket:
      description: A basket with items to be purchased
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Basket'
  securitySchemes:
    tebex_checkout_auth_basic:
      type: http
      scheme: basic